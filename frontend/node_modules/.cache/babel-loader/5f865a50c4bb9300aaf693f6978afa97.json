{"ast":null,"code":"var _jsxFileName = \"/Users/chrishar/Documents/CODI/Final Project/Siverr/frontend/src/components/Rooms/Rooms.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport './rooms.css';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchAllRoomsUser } from '../../redux/action-creators';\nimport { useHistory } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Rooms() {\n  _s();\n\n  var _roomsUserData$data;\n\n  const [loggedInId, SetLoggedinId] = useState(0);\n  const {\n    errorRooms,\n    roomsUserData\n  } = useSelector(state => state.fetchAllRoomsUserReducer);\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  const handleMessages = value => {\n    console.log({\n      value\n    });\n    history.push({\n      pathname: `/chat`,\n      state: {\n        room: value\n      }\n    });\n  };\n\n  useEffect(() => {\n    SetLoggedinId(Number(localStorage.getItem('USER-ID')));\n    dispatch(fetchAllRoomsUser());\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [console.log('roomsUserData', roomsUserData), /*#__PURE__*/_jsxDEV(\"ol\", {\n      className: \"list list-view-filter\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"list-title\",\n        children: \"Messages\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 1\n      }, this), (roomsUserData === null || roomsUserData === void 0 ? void 0 : (_roomsUserData$data = roomsUserData.data) === null || _roomsUserData$data === void 0 ? void 0 : _roomsUserData$data.length) > 0 && roomsUserData.data.map(room => room.user1 === loggedInId ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"list-rooms-h4\",\n          children: room.users2.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"list-rooms\",\n          onClick: () => handleMessages(room),\n          children: room.messages.messages\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"list-rooms-h4\",\n          children: room.users1.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"list-rooms\",\n          onClick: () => handleMessages(room),\n          children: room.messages.messages\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true) // (room.user1 === loggedInId || room.user2 === loggedInId )&& room.messages.sender_user === loggedInId?\n      // <>\n      // <h4 className='list-rooms-h4'>{loggedInId === room.users1.id === room.messages.sender_user?room.users2.name+':':'YOU1:'}</h4>\n      // <li className='list-rooms' onClick={()=>handleMessages(room)}>{room.messages.messages}</li>\n      // </>\n      // :<>\n      // <h4 className='list-rooms-h4'>{loggedInId === room.users2.id === room.messages.sender_user? 'YOU: ':room.users1.name+':'}</h4>\n      // <li className='list-rooms' onClick={()=>handleMessages(room)}>{room.messages.messages}</li>\n      // </>\n      )]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 1\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Rooms, \"HQNpGVTnP+E9ILxn+e4TTNLaFJ8=\", false, function () {\n  return [useSelector, useDispatch, useHistory];\n});\n\n_c = Rooms;\n\nvar _c;\n\n$RefreshReg$(_c, \"Rooms\");","map":{"version":3,"sources":["/Users/chrishar/Documents/CODI/Final Project/Siverr/frontend/src/components/Rooms/Rooms.js"],"names":["React","useEffect","useState","useDispatch","useSelector","fetchAllRoomsUser","useHistory","Rooms","loggedInId","SetLoggedinId","errorRooms","roomsUserData","state","fetchAllRoomsUserReducer","dispatch","history","handleMessages","value","console","log","push","pathname","room","Number","localStorage","getItem","data","length","map","user1","users2","name","messages","users1"],"mappings":";;;AAAA,OAAOA,KAAP,IAAcC,SAAd,EAAwBC,QAAxB,QAAuC,OAAvC;AACA,OAAO,aAAP;AACA,SAASC,WAAT,EAAqBC,WAArB,QAAwC,aAAxC;AACA,SAAQC,iBAAR,QAAiC,6BAAjC;AACA,SAASC,UAAT,QAA2B,kBAA3B;;;AACA,eAAe,SAASC,KAAT,GAAiB;AAAA;;AAAA;;AAE5B,QAAM,CAACC,UAAD,EAAYC,aAAZ,IAA2BP,QAAQ,CAAC,CAAD,CAAzC;AACA,QAAO;AAAGQ,IAAAA,UAAH;AAAcC,IAAAA;AAAd,MAAgCP,WAAW,CAAEQ,KAAD,IAAYA,KAAK,CAACC,wBAAnB,CAAlD;AACA,QAAMC,QAAQ,GAAGX,WAAW,EAA5B;AACA,QAAMY,OAAO,GAAGT,UAAU,EAA1B;;AAEA,QAAMU,cAAc,GAAIC,KAAD,IAAS;AAC5BC,IAAAA,OAAO,CAACC,GAAR,CAAY;AAACF,MAAAA;AAAD,KAAZ;AACAF,IAAAA,OAAO,CAACK,IAAR,CAAa;AACTC,MAAAA,QAAQ,EAAI,OADH;AAETT,MAAAA,KAAK,EAAE;AACLU,QAAAA,IAAI,EAACL;AADA;AAFE,KAAb;AAMH,GARD;;AAUAhB,EAAAA,SAAS,CAAC,MAAM;AACZQ,IAAAA,aAAa,CAACc,MAAM,CAACC,YAAY,CAACC,OAAb,CAAqB,SAArB,CAAD,CAAP,CAAb;AACAX,IAAAA,QAAQ,CAACT,iBAAiB,EAAlB,CAAR;AACD,GAHM,EAGJ,EAHI,CAAT;AAMA,sBACI;AAAA,eACPa,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA4BR,aAA5B,CADO,eAER;AAAI,MAAA,SAAS,EAAC,uBAAd;AAAA,8BACA;AAAI,QAAA,SAAS,EAAC,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADA,EAEC,CAAAA,aAAa,SAAb,IAAAA,aAAa,WAAb,mCAAAA,aAAa,CAAEe,IAAf,4EAAqBC,MAArB,IAA4B,CAA5B,IAAiChB,aAAa,CAACe,IAAd,CAAmBE,GAAnB,CAAwBN,IAAD,IAEzDA,IAAI,CAACO,KAAL,KAAerB,UAAf,gBACI;AAAA,gCACA;AAAI,UAAA,SAAS,EAAC,eAAd;AAAA,oBAAgCc,IAAI,CAACQ,MAAL,CAAYC;AAA5C;AAAA;AAAA;AAAA;AAAA,gBADA,eAEA;AAAI,UAAA,SAAS,EAAC,YAAd;AAA2B,UAAA,OAAO,EAAE,MAAIf,cAAc,CAACM,IAAD,CAAtD;AAAA,oBAA+DA,IAAI,CAACU,QAAL,CAAcA;AAA7E;AAAA;AAAA;AAAA;AAAA,gBAFA;AAAA,sBADJ,gBAMI;AAAA,gCACA;AAAI,UAAA,SAAS,EAAC,eAAd;AAAA,oBAAgCV,IAAI,CAACW,MAAL,CAAYF;AAA5C;AAAA;AAAA;AAAA;AAAA,gBADA,eAEA;AAAI,UAAA,SAAS,EAAC,YAAd;AAA2B,UAAA,OAAO,EAAE,MAAIf,cAAc,CAACM,IAAD,CAAtD;AAAA,oBAA+DA,IAAI,CAACU,QAAL,CAAcA;AAA7E;AAAA;AAAA;AAAA;AAAA,gBAFA;AAAA,sBAR8B,CAalC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArBkC,OAFlC;AAAA;AAAA;AAAA;AAAA;AAAA,YAFQ;AAAA,kBADJ;AAkCH;;GAzDuBzB,K;UAGmBH,W,EACtBD,W,EACDG,U;;;KALIC,K","sourcesContent":["import React,{useEffect,useState} from 'react'\nimport './rooms.css';\nimport { useDispatch,useSelector } from \"react-redux\";\nimport {fetchAllRoomsUser } from '../../redux/action-creators';\nimport { useHistory } from 'react-router-dom';\nexport default function Rooms() {\n\n    const [loggedInId,SetLoggedinId]=useState(0);\n    const  {  errorRooms,roomsUserData } = useSelector((state) =>  state.fetchAllRoomsUserReducer);\n    const dispatch = useDispatch();\n    const history = useHistory();\n \n    const handleMessages = (value)=>{\n        console.log({value})\n        history.push({\n            pathname : `/chat`,\n            state :{\n              room:value\n            }\n            } );\n    }\n    \n    useEffect(() => {\n        SetLoggedinId(Number(localStorage.getItem('USER-ID')));\n        dispatch(fetchAllRoomsUser()) \n      }, []);\n     \n\n    return (\n        <>\n{console.log('roomsUserData',roomsUserData)}\n<ol className=\"list list-view-filter\">\n<h3 className='list-title'>Messages</h3>\n{roomsUserData?.data?.length>0 && roomsUserData.data.map((room)=>\n\nroom.user1 === loggedInId ?\n    <>\n    <h4 className='list-rooms-h4' >{room.users2.name}</h4>\n    <li className='list-rooms' onClick={()=>handleMessages(room)}>{room.messages.messages}</li>\n    </>\n    :\n    <>\n    <h4 className='list-rooms-h4' >{room.users1.name}</h4>\n    <li className='list-rooms' onClick={()=>handleMessages(room)}>{room.messages.messages}</li>\n    </>\n\n// (room.user1 === loggedInId || room.user2 === loggedInId )&& room.messages.sender_user === loggedInId?\n// <>\n// <h4 className='list-rooms-h4'>{loggedInId === room.users1.id === room.messages.sender_user?room.users2.name+':':'YOU1:'}</h4>\n// <li className='list-rooms' onClick={()=>handleMessages(room)}>{room.messages.messages}</li>\n// </>\n// :<>\n// <h4 className='list-rooms-h4'>{loggedInId === room.users2.id === room.messages.sender_user? 'YOU: ':room.users1.name+':'}</h4>\n// <li className='list-rooms' onClick={()=>handleMessages(room)}>{room.messages.messages}</li>\n// </>\n\n)}\n\n  \n</ol>\n        </>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}