{"ast":null,"code":"import axios from 'axios';\nimport { SIGN_IN_ADMIN_FAILURE, SIGN_IN_ADMIN_REQUEST, SIGN_IN_ADMIN_SUCCESS, SIGN_UP_ADMIN_FAILURE, SIGN_UP_ADMIN_REQUEST, SIGN_UP_ADMIN_SUCCESS, SIGN_OUT_ADMIN_FAILURE, SIGN_OUT_ADMIN_REQUEST, SIGN_OUT_ADMIN_SUCCESS, GET_ALL_SERVICES_PENDING_REQUEST_ADMIN, GET_ALL_SERVICES_PENDING_SUCCESS_ADMIN, GET_ALL_SERVICES_PENDING_FAILURE_ADMIN, GET_ALL_SERVICES_ACCEPTED_REQUEST_ADMIN, GET_ALL_SERVICES_ACCEPTED_SUCCESS_ADMIN, GET_ALL_SERVICES_ACCEPTED_FAILURE_ADMIN, GET_ALL_SERVICES_REJECTED_REQUEST_ADMIN, GET_ALL_SERVICES_REJECTED_SUCCESS_ADMIN, GET_ALL_SERVICES_REJECTED_FAILURE_ADMIN, REJECT_SERVICE_PENDING_REQUEST_ADMIN, REJECT_SERVICE_PENDING_SUCCESS_ADMIN, REJECT_SERVICE_PENDING_FAILED_ADMIN, ACCCEPT_SERVICE_REQUEST_ADMIN, ACCCEPT_SERVICE_SUCCESS_ADMIN, ACCCEPT_SERVICE_FAILED_ADMIN, SIGN_IN_USER_FAILURE, SIGN_IN_USER_REQUEST, SIGN_IN_USER_SUCCESS, SIGN_UP_USER_FAILURE, SIGN_UP_USER_REQUEST, SIGN_UP_USER_SUCCESS, SIGN_OUT_USER_FAILURE, SIGN_OUT_USER_REQUEST, SIGN_OUT_USER_SUCCESS, ACCEPTED, REJECTED, PENDING, GET_ALL_CATEGORY_ACCEPTED_REQUEST_USER, GET_ALL_CATEGORY_ACCEPTED_SUCCESS_USER, GET_ALL_CATEGORY_ACCEPTED_FAILED_USER, GET_SUBCATEGORY_BY_CATEGORY_ID_REQUEST_USER, GET_SUBCATEGORY_BY_CATEGORY_ID_SUCCESS_USER, GET_SUBCATEGORY_BY_CATEGORY_ID_FAILED_USER, EMPTY_SUBCATEGORY, POST_CREATE_SERVICE_REQUEST_USER, POST_CREATE_SERVICE_SUCCESS_USER, POST_CREATE_SERVICE_FAILED_USER, GET_ALL_CATEGORY_REQUEST_USER, GET_ALL_CATEGORY_SUCCESS_USER, GET_ALL_CATEGORY_FAILED_USER, GET_ROOMS_REQUEST_USER, GET_ROOMS_SUCCESS_USER, GET_ROOMS_FAILED_USER, CONTACT_SELLER_REQUEST_USER, CONTACT_SELLER_SUCCESS_USER, CONTACT_SELLER_FAILED_USER, POST_ORDER_REQUEST_USER, POST_ORDER_SUCCESS_USER, POST_ORDER_FAILED_USER, GET_MY_ORDER_PENDING_REQUEST_USER, GET_MY_ORDER_PENDING_SUCCESS_USER, GET_MY_ORDER_PENDING_FAILED_USER, GET_MY_ORDER_ACCEPTED_REQUEST_USER, GET_MY_ORDER_ACCEPTED_SUCCESS_USER, GET_MY_ORDER_ACCEPTED_FAILED_USER, GET_MY_ORDER_REJECTED_REQUEST_USER, GET_MY_ORDER_REJECTED_SUCCESS_USER, GET_MY_ORDER_REJECTED_FAILED_USER, GET_RECEIVED_ORDER_PENDING_REQUEST_USER, GET_RECEIVED_ORDER_PENDING_SUCCESS_USER, GET_RECEIVED_ORDER_PENDING_FAILED_USER, GET_RECEIVED_ORDER_ACCEPTED_REQUEST_USER, GET_RECEIVED_ORDER_ACCEPTED_SUCCESS_USER, GET_RECEIVED_ORDER_ACCEPTED_FAILED_USER, GET_RECEIVED_ORDER_REJECTED_REQUEST_USER, GET_RECEIVED_ORDER_REJECTED_SUCCESS_USER, GET_RECEIVED_ORDER_REJECTED_FAILED_USER, POST_ACCEPT_ORDER_REQUEST_USER, POST_ACCEPT_ORDER_SUCCESS_USER, POST_ACCEPT_ORDER_FAILED_USER, POST_REJECT_ORDER_REQUEST_USER, POST_REJECT_ORDER_SUCCESS_USER, POST_REJECT_ORDER_FAILED_USER, POST_COMMENT_REQUEST_USER, POST_COMMENT_SUCCESS_USER, POST_COMMENT_FAILED_USER, GET_MY_SERVICE_PENDING_REQUEST_USER, GET_MY_SERVICE_PENDING_SUCCESS_USER, GET_MY_SERVICE_PENDING_FAILED_USER, GET_MY_SERVICE_ACCEPTED_REQUEST_USER, GET_MY_SERVICE_ACCEPTED_SUCCESS_USER, GET_MY_SERVICE_ACCEPTED_FAILED_USER, GET_MY_SERVICE_REJECTED_REQUEST_USER, GET_MY_SERVICE_REJECTED_SUCCESS_USER, GET_MY_SERVICE_REJECTED_FAILED_USER, GET_ALL_SUCATEGORY_CATEGORY_SERVICE_REQUEST_GUEST, GET_ALL_SUCATEGORY_CATEGORY_SERVICE_SUCCESS_GUEST, GET_ALL_SUCATEGORY_CATEGORY_SERVICE_FAILED_GUEST, ACCEPTED_SERVICES, GET_ALL_SUB_ILLUSTRATOR_SERVICE_REQUEST_GUEST, GET_ALL_SUB_ILLUSTRATOR_SERVICE_SUCCESS_GUEST, GET_ALL_SUB_ILLUSTRATOR_SERVICE_FAILED_GUEST, GET_ALL_SUB_VOICE_SERVICE_REQUEST_GUEST, GET_ALL_SUB_VOICE_SERVICE_SUCCESS_GUEST, GET_ALL_SUB_VOICE_SERVICE_FAILED_GUEST, GET_COMMENT_REQUEST_GUEST, GET_COMMENT_SUCCESS_GUEST, GET_COMMENT_FAILED_GUEST } from './action-types';\nimport { toast } from \"react-toastify\";\nimport { URL_Admin, URL_Guest, URL_User } from \"../components/URL\"; //////////////////////////////ADMIN/////////////////////////////////////////////////////////\n/////////////////////REJECT PENDING REQUEST /////////////////////////////////\n\nconst rejectServiceRequestAdmin = () => {\n  return {\n    type: REJECT_SERVICE_PENDING_REQUEST_ADMIN\n  };\n};\n\nconst rejectServiceSuccessAdmin = rejectServiceAdminData => {\n  return {\n    type: REJECT_SERVICE_PENDING_SUCCESS_ADMIN,\n    payload: {\n      rejectServiceAdminData\n    }\n  };\n};\n\nconst rejectServiceFailureAdmin = rejectServiceDataError => {\n  return {\n    type: REJECT_SERVICE_PENDING_FAILED_ADMIN,\n    payload: rejectServiceDataError\n  };\n};\n\nexport const rejectServiceAdmin = (reason_for_rejection, service_id) => {\n  return async function (dispatch) {\n    dispatch(rejectServiceRequestAdmin());\n\n    try {\n      const response = await axios({\n        method: \"post\",\n        url: URL_Admin + `/rejectPendingServices/${service_id}`,\n        headers: {\n          \"Content-type\": \"application/json\",\n          \"Accept\": \"application/json\",\n          Authorization: `Bearer ${localStorage.getItem(\"ADMIN-TOKEN\")}`\n        },\n        data: reason_for_rejection\n      });\n      const data = response.data;\n\n      if (response.data.message === \"You must be logged in as Admin\") {\n        dispatch(signOutAdmin());\n      } else {\n        // toast.success(data.message);\n        dispatch(rejectServiceSuccessAdmin(data));\n      }\n    } catch (rejectServiceDataError) {\n      dispatch(rejectServiceFailureAdmin(rejectServiceDataError));\n    }\n  };\n}; ////////////ACCEPT PENDING REQUEST ////////////////////////\n\nconst accepteServiceRequestAdmin = () => {\n  return {\n    type: ACCCEPT_SERVICE_REQUEST_ADMIN\n  };\n};\n\nconst accepteServiceSuccessAdmin = acceptedServiceAdminData => {\n  return {\n    type: ACCCEPT_SERVICE_SUCCESS_ADMIN,\n    payload: {\n      acceptedServiceAdminData\n    }\n  };\n};\n\nconst accepteServiceFailureAdmin = acceptedServiceDataError => {\n  return {\n    type: ACCCEPT_SERVICE_FAILED_ADMIN,\n    payload: acceptedServiceDataError\n  };\n};\n\nexport const acceptServiceAdmin = service_id => {\n  return async function (dispatch) {\n    dispatch(accepteServiceRequestAdmin());\n\n    try {\n      const response = await axios({\n        method: \"put\",\n        url: URL_Admin + `/acceptService/${service_id}`,\n        headers: {\n          \"Content-type\": \"application/json\",\n          \"Accept\": \"application/json\",\n          Authorization: `Bearer ${localStorage.getItem(\"ADMIN-TOKEN\")}`\n        }\n      });\n      const data = response.data;\n\n      if (response.data.message === \"You must be logged in as Admin\") {\n        dispatch(signOutAdmin());\n      } else {\n        toast.success(data.message);\n        dispatch(accepteServiceSuccessAdmin(data));\n      }\n    } catch (acceptedServiceDataError) {\n      dispatch(accepteServiceFailureAdmin(acceptedServiceDataError));\n    }\n  };\n}; ////////TOGGLE SCREENS/////////\n\nexport const pendingScreen = () => {\n  return {\n    type: PENDING\n  };\n};\nexport const rejectedScreen = () => {\n  return {\n    type: REJECTED\n  };\n};\nexport const acceptedScreen = () => {\n  return {\n    type: ACCEPTED\n  };\n}; // GET ALL REJECTED SERVICES///\n\nconst fetchAllRejectedServicesRequest = () => {\n  return {\n    type: GET_ALL_SERVICES_REJECTED_REQUEST_ADMIN,\n    payload: {\n      loading: true\n    }\n  };\n};\n\nconst fetchAllRejectedServicesSuccess = rejectedServiceData => {\n  return {\n    type: GET_ALL_SERVICES_REJECTED_SUCCESS_ADMIN,\n    payload: {\n      rejectedServiceData\n    }\n  };\n};\n\nconst fetchAllRejectedServicesFailure = errorRejected => {\n  return {\n    type: GET_ALL_SERVICES_REJECTED_FAILURE_ADMIN,\n    payload: errorRejected\n  };\n};\n\nexport const fetchRejectedServices = payload => {\n  return async function (dispatch) {\n    dispatch(fetchAllRejectedServicesRequest());\n\n    try {\n      const res = await axios({\n        method: \"get\",\n        url: URL_Admin + '/getAllServiceRejected',\n        data: payload,\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"ADMIN-TOKEN\")}`\n        }\n      });\n\n      if (res.data.message === \"You must be logged in as Admin\") {\n        dispatch(signOutAdmin());\n      } else {\n        const result = res.data.data;\n        dispatch(fetchAllRejectedServicesSuccess(result));\n      }\n    } catch (errorRejected) {\n      dispatch(fetchAllRejectedServicesFailure(errorRejected.response.data));\n    }\n  };\n}; // GET ALL ACCEPTED SERVICES///\n\nconst fetchAllAcceptedServicesRequest = () => {\n  return {\n    type: GET_ALL_SERVICES_ACCEPTED_REQUEST_ADMIN,\n    payload: {\n      loading: true\n    }\n  };\n};\n\nconst fetchAllAcceptedServicesSuccess = acceptedServiceData => {\n  return {\n    type: GET_ALL_SERVICES_ACCEPTED_SUCCESS_ADMIN,\n    payload: {\n      acceptedServiceData\n    }\n  };\n};\n\nconst fetchAllAcceptedServicesFailure = errorAccepted => {\n  return {\n    type: GET_ALL_SERVICES_ACCEPTED_FAILURE_ADMIN,\n    payload: errorAccepted\n  };\n};\n\nexport const fetchAcceptedServices = payload => {\n  return async function (dispatch) {\n    dispatch(fetchAllAcceptedServicesRequest());\n\n    try {\n      const res = await axios({\n        method: \"get\",\n        url: URL_Admin + '/getAllServiceAccepted',\n        data: payload,\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"ADMIN-TOKEN\")}`\n        }\n      });\n\n      if (res.data.message === \"You must be logged in as Admin\") {\n        dispatch(signOutAdmin());\n      } else {\n        const result = res.data.data;\n        dispatch(fetchAllAcceptedServicesSuccess(result));\n      }\n    } catch (errorAccepted) {\n      dispatch(fetchAllAcceptedServicesFailure(errorAccepted.response.data));\n    }\n  };\n}; //// GET ALL PENDING SERVICES/////\n\nconst fetchAllPendingServicesRequest = () => {\n  return {\n    type: GET_ALL_SERVICES_PENDING_REQUEST_ADMIN,\n    payload: {\n      loading: true\n    }\n  };\n};\n\nconst fetchAllPendingServicesSuccess = pendingServiceData => {\n  return {\n    type: GET_ALL_SERVICES_PENDING_SUCCESS_ADMIN,\n    payload: {\n      pendingServiceData\n    }\n  };\n};\n\nconst fetchAllPendingServicesFailure = errorPending => {\n  return {\n    type: GET_ALL_SERVICES_PENDING_FAILURE_ADMIN,\n    payload: errorPending\n  };\n};\n\nexport const fetchPendingServices = payload => {\n  return async function (dispatch) {\n    dispatch(fetchAllPendingServicesRequest());\n\n    try {\n      const res = await axios({\n        method: \"get\",\n        url: URL_Admin + '/getAllServicePending',\n        data: payload,\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"ADMIN-TOKEN\")}`\n        }\n      });\n\n      if (res.data.message === \"You must be logged in as Admin\") {\n        dispatch(signOutAdmin());\n      } else {\n        const result = res.data.data;\n        dispatch(fetchAllPendingServicesSuccess(result)); // dispatch(fetchAllAcceptedServicesFailure(\"\")); \n      }\n    } catch (errorPending) {\n      dispatch(fetchAllPendingServicesFailure(errorPending.response.data));\n    }\n  };\n}; // SIGN UP ADMIN\n\nconst signUpRequestAdmin = () => {\n  return {\n    type: SIGN_UP_ADMIN_REQUEST\n  };\n};\n\nconst signUpSuccessAdmin = user => {\n  return {\n    type: SIGN_UP_ADMIN_SUCCESS,\n    payload: {\n      user\n    }\n  };\n};\n\nconst signUpFailureAdmin = error => {\n  return {\n    type: SIGN_UP_ADMIN_FAILURE,\n    payload: error\n  };\n};\n\nexport const signUpAdmin = (user, history) => {\n  return async function (dispatch) {\n    dispatch(signUpRequestAdmin());\n\n    try {\n      const res = await axios({\n        method: \"post\",\n        url: URL_Admin + '/register',\n        data: user\n      });\n      const {\n        data\n      } = res.data;\n      dispatch(signUpSuccessAdmin(data));\n      history.push('/adminhome');\n    } catch (error) {\n      dispatch(signUpFailureAdmin(error));\n    }\n  };\n}; //Sign in  ADMIN\n\nconst signInRequestAdmin = () => {\n  return {\n    type: SIGN_IN_ADMIN_REQUEST\n  };\n};\n\nconst signInSuccessAdmin = payload => {\n  return {\n    type: SIGN_IN_ADMIN_SUCCESS,\n    payload\n  };\n};\n\nconst signInFailureAdmin = error => {\n  return {\n    type: SIGN_IN_ADMIN_FAILURE,\n    payload: error\n  };\n};\n\nexport const signinAdmin = (payload, history) => {\n  return async function (dispatch) {\n    dispatch(signInRequestAdmin);\n\n    try {\n      const res = await axios({\n        method: \"POST\",\n        url: URL_Admin + \"/login\",\n        data: payload,\n        headers: {\n          \"Content-type\": \"application/json\",\n          \"Accept\": \"application/json\"\n        }\n      });\n      const {\n        access_token,\n        name\n      } = res.data;\n      localStorage.setItem(\"ADMIN-NAME\", name);\n      localStorage.setItem(\"ADMIN-TOKEN\", access_token);\n      dispatch(signInSuccessAdmin({\n        access_token,\n        name\n      }));\n    } catch (error) {\n      if (error.response && error.response.status === 404) {\n        dispatch(signInFailureAdmin(error.response.data));\n      } else {\n        dispatch(signUpFailureAdmin(error));\n      }\n    }\n  };\n}; // sign out ADMIN\n\nexport const signOutRequestAdmin = () => {\n  return {\n    type: SIGN_OUT_ADMIN_REQUEST\n  };\n};\nexport const signOutSuccessAdmin = () => {\n  return {\n    type: SIGN_OUT_ADMIN_SUCCESS\n  };\n};\nexport const signOutFailureAdmin = () => {\n  return {\n    type: SIGN_OUT_ADMIN_FAILURE\n  };\n};\nexport const signOutAdmin = history => {\n  return async function (dispatch) {\n    dispatch(signOutRequestAdmin());\n\n    try {\n      const res = await axios({\n        method: \"POST\",\n        url: URL_Admin + \"/logout\",\n        headers: {\n          \"Content-type\": \"application/json\",\n          \"Accept\": \"application/json\",\n          \"Authorization\": `Bearer ${localStorage.getItem(\"ADMIN-TOKEN\")}`\n        }\n      });\n      localStorage.removeItem(\"ADMIN-TOKEN\");\n      localStorage.removeItem(\"ADMIN-NAME\");\n      history.push('/admin/signin');\n      toast.success(\"Logged out\");\n    } catch (error) {\n      if (localStorage.getItem(\"ADMIN-TOKEN\") !== null) {\n        dispatch(signOutFailureAdmin());\n      } else {\n        dispatch(signOutSuccessAdmin());\n      }\n    }\n  };\n}; /////////////////////////USER///////////////////////////////////////////////////////////////////////////////////\n//////////////GET ALL MY SERVICE REJECTED///////////\n\nconst fetchAllMyRejectedServiceUserRequest = () => {\n  return {\n    type: GET_MY_SERVICE_REJECTED_REQUEST_USER,\n    payload: {\n      loading: true\n    }\n  };\n};\n\nconst fetchAllMyRejectedServiceUserSuccess = myServiceRejectedData => {\n  return {\n    type: GET_MY_SERVICE_REJECTED_SUCCESS_USER,\n    payload: {\n      myServiceRejectedData\n    }\n  };\n};\n\nconst fetchAllMyRejectedServiceUserFailure = errorMyServiceRejected => {\n  return {\n    type: GET_MY_SERVICE_REJECTED_FAILED_USER,\n    payload: errorMyServiceRejected\n  };\n};\n\nexport const fetchAllMyRejectedServiceUser = () => {\n  return async function (dispatch) {\n    dispatch(fetchAllMyRejectedServiceUserRequest());\n\n    try {\n      const res = await axios({\n        method: \"get\",\n        url: URL_User + '/getServiceRejected',\n        headers: {\n          \"Accept\": \"application/json\",\n          Authorization: `Bearer ${localStorage.getItem(\"USER-TOKEN\")}`\n        }\n      });\n      const result = res.data;\n\n      if (res.data.message === \"You must be logged in\") {\n        dispatch(signOutUser());\n      } else {\n        dispatch(fetchAllMyRejectedServiceUserSuccess(result));\n      }\n    } catch (errorMyServiceAccepted) {\n      dispatch(fetchAllMyRejectedServiceUserFailure(errorMyServiceAccepted.response.data));\n    }\n  };\n}; //////////////GET ALL MY SERVICE ACCEPTED///////////\n\nconst fetchAllMyAcceptedServiceUserRequest = () => {\n  return {\n    type: GET_MY_SERVICE_ACCEPTED_REQUEST_USER,\n    payload: {\n      loading: true\n    }\n  };\n};\n\nconst fetchAllMyAcceptedServiceUserSuccess = myServiceAcceptedData => {\n  return {\n    type: GET_MY_SERVICE_ACCEPTED_SUCCESS_USER,\n    payload: {\n      myServiceAcceptedData\n    }\n  };\n};\n\nconst fetchAllMyAcceptedServiceUserFailure = errorMyServiceAccepted => {\n  return {\n    type: GET_MY_SERVICE_ACCEPTED_FAILED_USER,\n    payload: errorMyServiceAccepted\n  };\n};\n\nexport const fetchAllMyAcceptedServiceUser = () => {\n  return async function (dispatch) {\n    console.log('ehehehhe');\n    dispatch(fetchAllMyAcceptedServiceUserRequest());\n\n    try {\n      const res = await axios({\n        method: \"get\",\n        url: URL_User + '/getServiceAccepted',\n        headers: {\n          \"Accept\": \"application/json\",\n          Authorization: `Bearer ${localStorage.getItem(\"USER-TOKEN\")}`\n        }\n      });\n      const result = res.data;\n\n      if (res.data.message === \"You must be logged in\") {\n        dispatch(signOutUser());\n      } else {\n        dispatch(fetchAllMyAcceptedServiceUserSuccess(result));\n      }\n    } catch (errorMyServiceAccepted) {\n      dispatch(fetchAllMyAcceptedServiceUserFailure(errorMyServiceAccepted.response.data));\n    }\n  };\n}; ///////////////GET ALL MY SERVICE PENDING///////////\n\nconst fetchAllMyPendingServiceUserRequest = () => {\n  return {\n    type: GET_MY_SERVICE_PENDING_REQUEST_USER,\n    payload: {\n      loading: true\n    }\n  };\n};\n\nconst fetchAllMyPendingServiceUserSuccess = myServicePendingData => {\n  return {\n    type: GET_MY_SERVICE_PENDING_SUCCESS_USER,\n    payload: {\n      myServicePendingData\n    }\n  };\n};\n\nconst fetchAllMyPendingServiceUserFailure = errorMyServicePending => {\n  return {\n    type: GET_MY_SERVICE_PENDING_FAILED_USER,\n    payload: errorMyServicePending\n  };\n};\n\nexport const fetchAllMyPendingServiceUser = () => {\n  return async function (dispatch) {\n    console.log('ehehehhe');\n    dispatch(fetchAllMyPendingServiceUserRequest());\n\n    try {\n      const res = await axios({\n        method: \"get\",\n        url: URL_User + '/getServicePending',\n        headers: {\n          \"Accept\": \"application/json\",\n          Authorization: `Bearer ${localStorage.getItem(\"USER-TOKEN\")}`\n        }\n      });\n      const result = res.data;\n\n      if (res.data.message === \"You must be logged in\") {\n        dispatch(signOutUser());\n      } else {\n        dispatch(fetchAllMyPendingServiceUserSuccess(result));\n      }\n    } catch (errorMyServicePending) {\n      dispatch(fetchAllMyPendingServiceUserFailure(errorMyServicePending.response.data));\n    }\n  };\n}; ////////////POST COMMENT ////////////////////////\n\nconst postCommentRequestUser = () => {\n  return {\n    type: POST_COMMENT_REQUEST_USER\n  };\n};\n\nconst postCommentSuccessUser = commentData => {\n  return {\n    type: POST_COMMENT_SUCCESS_USER,\n    payload: {\n      commentData\n    }\n  };\n};\n\nconst postCommentFailureUser = ErrorComment => {\n  return {\n    type: POST_COMMENT_FAILED_USER,\n    payload: ErrorComment\n  };\n};\n\nexport const postCommentUser = comment_data => {\n  return async function (dispatch) {\n    dispatch(postCommentRequestUser());\n\n    try {\n      const response = await axios({\n        method: \"post\",\n        url: URL_User + `/createComment`,\n        data: comment_data,\n        headers: {\n          \"Content-type\": \"application/json\",\n          \"Accept\": \"application/json\",\n          Authorization: `Bearer ${localStorage.getItem(\"USER-TOKEN\")}`\n        }\n      });\n      const data = response.data;\n\n      if (response.data.message === \"You must be logged\") {\n        dispatch(signOutUser());\n      } else {\n        dispatch(postCommentSuccessUser(data));\n      }\n    } catch (ErrorComment) {\n      dispatch(postCommentFailureUser(ErrorComment.response.data));\n    }\n  };\n}; ////////////POST REJECT ORDER ////////////////////////\n\nconst rejectOrderRequestUser = () => {\n  return {\n    type: POST_REJECT_ORDER_REQUEST_USER\n  };\n};\n\nconst rejectOrderSuccessUser = rejectOrderData => {\n  return {\n    type: POST_REJECT_ORDER_SUCCESS_USER,\n    payload: {\n      rejectOrderData\n    }\n  };\n};\n\nconst rejectOrderFailureUser = ErrorRejectOrder => {\n  return {\n    type: POST_REJECT_ORDER_FAILED_USER,\n    payload: ErrorRejectOrder\n  };\n};\n\nexport const rejectOrderUser = rejectOrder_id => {\n  return async function (dispatch) {\n    dispatch(rejectOrderRequestUser());\n\n    try {\n      const response = await axios({\n        method: \"put\",\n        url: URL_User + `/rejectOrder/${rejectOrder_id}`,\n        headers: {\n          \"Content-type\": \"application/json\",\n          \"Accept\": \"application/json\",\n          Authorization: `Bearer ${localStorage.getItem(\"USER-TOKEN\")}`\n        }\n      });\n      const data = response.data;\n\n      if (response.data.message === \"You must be logged\") {\n        dispatch(signOutUser());\n      } else {\n        toast.success('Order Rejected');\n        dispatch(rejectOrderSuccessUser(data));\n      }\n    } catch (ErrorRejectOrder) {\n      dispatch(rejectOrderFailureUser(ErrorRejectOrder));\n    }\n  };\n}; ////////////POST ACCEPT ORDER ////////////////////////\n\nconst acceptOrderRequestUser = () => {\n  return {\n    type: POST_ACCEPT_ORDER_REQUEST_USER\n  };\n};\n\nconst acceptOrderSuccessUser = acceptOrderData => {\n  return {\n    type: POST_ACCEPT_ORDER_SUCCESS_USER,\n    payload: {\n      acceptOrderData\n    }\n  };\n};\n\nconst acceptOrderFailureUser = ErroracceptOrder => {\n  return {\n    type: POST_ACCEPT_ORDER_FAILED_USER,\n    payload: ErroracceptOrder\n  };\n};\n\nexport const acceptOrderUser = acceptOrderData => {\n  return async function (dispatch) {\n    dispatch(acceptOrderRequestUser());\n\n    try {\n      const response = await axios({\n        method: \"put\",\n        url: URL_User + `/acceptOrder`,\n        data: acceptOrderData,\n        headers: {\n          \"Content-type\": \"application/json\",\n          \"Accept\": \"application/json\",\n          Authorization: `Bearer ${localStorage.getItem(\"USER-TOKEN\")}`\n        }\n      });\n      const data = response.data;\n\n      if (response.data.message === \"You must be logged\") {\n        dispatch(signOutUser());\n      } else {\n        toast.success('Order Accepted');\n        dispatch(acceptOrderSuccessUser(data)); // dispatch(fetchAllRecievedPendingOrderUser())\n      }\n    } catch (ErroracceptOrder) {\n      dispatch(acceptOrderFailureUser(ErroracceptOrder));\n    }\n  };\n}; //////////////GET ALL RECEIVED REJECTED ORDER /////////////\n\nconst fetchAllRecievedRejectedOrderUserRequest = () => {\n  return {\n    type: GET_RECEIVED_ORDER_REJECTED_REQUEST_USER,\n    payload: {\n      loading: true\n    }\n  };\n};\n\nconst fetchAllRecievedRejectedOrderUserSuccess = receivedRejectedOrderData => {\n  return {\n    type: GET_RECEIVED_ORDER_REJECTED_SUCCESS_USER,\n    payload: {\n      receivedRejectedOrderData\n    }\n  };\n};\n\nconst fetchAllRecievedRejectedOrderUserFailure = errorRecievedRejectedOrder => {\n  return {\n    type: GET_RECEIVED_ORDER_REJECTED_FAILED_USER,\n    payload: errorRecievedRejectedOrder\n  };\n};\n\nexport const fetchAllRecievedRejectedOrderUser = () => {\n  return async function (dispatch) {\n    dispatch(fetchAllRecievedRejectedOrderUserRequest());\n\n    try {\n      const res = await axios({\n        method: \"get\",\n        url: URL_User + '/getAllRejectedOrder',\n        headers: {\n          \"Accept\": \"application/json\",\n          Authorization: `Bearer ${localStorage.getItem(\"USER-TOKEN\")}`\n        }\n      });\n      const result = res.data;\n      let payload = [];\n      result.data.map(res => {\n        if (res.orders_rejected.length > 0) {\n          res.orders_rejected.map(result2 => {\n            payload = [...payload, { ...result2,\n              service: res\n            }];\n          });\n        }\n      });\n\n      if (res.data.message === \"You must be logged in\") {\n        dispatch(signOutUser());\n      } else {\n        dispatch(fetchAllRecievedRejectedOrderUserSuccess(payload));\n      }\n    } catch (errorRecievedRejectedOrder) {\n      dispatch(fetchAllRecievedRejectedOrderUserFailure(errorRecievedRejectedOrder.response.data));\n    }\n  };\n}; //////////////GET ALL RECEIVED ACCEPTED ORDER /////////////\n\nconst fetchAllRecievedAcceptedOrderUserRequest = () => {\n  return {\n    type: GET_RECEIVED_ORDER_ACCEPTED_REQUEST_USER,\n    payload: {\n      loading: true\n    }\n  };\n};\n\nconst fetchAllRecievedAcceptedOrderUserSuccess = receivedAcceptedOrderData => {\n  return {\n    type: GET_RECEIVED_ORDER_ACCEPTED_SUCCESS_USER,\n    payload: {\n      receivedAcceptedOrderData\n    }\n  };\n};\n\nconst fetchAllRecievedAcceptedOrderUserFailure = errorRecievedAcceptedOrder => {\n  return {\n    type: GET_RECEIVED_ORDER_ACCEPTED_FAILED_USER,\n    payload: errorRecievedAcceptedOrder\n  };\n};\n\nexport const fetchAllRecievedAcceptedOrderUser = () => {\n  return async function (dispatch) {\n    dispatch(fetchAllRecievedAcceptedOrderUserRequest());\n\n    try {\n      const res = await axios({\n        method: \"get\",\n        url: URL_User + '/getAllAcceptedOrder',\n        headers: {\n          \"Accept\": \"application/json\",\n          Authorization: `Bearer ${localStorage.getItem(\"USER-TOKEN\")}`\n        }\n      });\n      const result = res.data;\n      let payload = [];\n      result.data.map(res => {\n        if (res.orders_accepted.length > 0) {\n          res.orders_accepted.map(result2 => {\n            payload = [...payload, { ...result2,\n              service: res\n            }];\n          });\n        }\n      });\n\n      if (res.data.message === \"You must be logged in\") {\n        dispatch(signOutUser());\n      } else {\n        dispatch(fetchAllRecievedAcceptedOrderUserSuccess(payload));\n      }\n    } catch (errorRecievedAcceptedOrder) {\n      dispatch(fetchAllRecievedAcceptedOrderUserFailure(errorRecievedAcceptedOrder.response.data));\n    }\n  };\n}; //////////////GET ALL RECEIVED  PENDING ORDER /////////////\n\nconst fetchAllRecievedPendingOrderUserRequest = () => {\n  return {\n    type: GET_RECEIVED_ORDER_PENDING_REQUEST_USER,\n    payload: {\n      loading: true\n    }\n  };\n};\n\nconst fetchAllRecievedPendingOrderUserSuccess = receivedPendingOrderData => {\n  return {\n    type: GET_RECEIVED_ORDER_PENDING_SUCCESS_USER,\n    payload: {\n      receivedPendingOrderData\n    }\n  };\n};\n\nconst fetchAllRecievedPendingOrderUserFailure = errorRecievedPendingOrder => {\n  return {\n    type: GET_RECEIVED_ORDER_PENDING_FAILED_USER,\n    payload: errorRecievedPendingOrder\n  };\n};\n\nexport const fetchAllRecievedPendingOrderUser = () => {\n  return async function (dispatch) {\n    dispatch(fetchAllRecievedPendingOrderUserRequest());\n\n    try {\n      const res = await axios({\n        method: \"get\",\n        url: URL_User + '/getAllPendingOrder',\n        headers: {\n          \"Accept\": \"application/json\",\n          Authorization: `Bearer ${localStorage.getItem(\"USER-TOKEN\")}`\n        }\n      });\n      const result = res.data;\n      let payload = [];\n      result.data.map(res => {\n        if (res.orders_pending.length > 0) {\n          res.orders_pending.map(result2 => {\n            payload = [...payload, { ...result2,\n              service: res\n            }];\n          });\n        }\n      });\n\n      if (res.data.message === \"You must be logged in\") {\n        dispatch(signOutUser());\n      } else {\n        dispatch(fetchAllRecievedPendingOrderUserSuccess(payload));\n      }\n    } catch (errorRecievedPendingOrder) {\n      dispatch(fetchAllRecievedPendingOrderUserFailure(errorRecievedPendingOrder.response.data));\n    }\n  };\n}; ///////////////GET ALL MY REJECTED ORDER /////////\n\nconst fetchAllMyRejectedOrderUserRequest = () => {\n  return {\n    type: GET_MY_ORDER_REJECTED_REQUEST_USER,\n    payload: {\n      loading: true\n    }\n  };\n};\n\nconst fetchAllMyRejectedOrderUserSucces = myRejectedOrderData => {\n  return {\n    type: GET_MY_ORDER_REJECTED_SUCCESS_USER,\n    payload: {\n      myRejectedOrderData\n    }\n  };\n};\n\nconst fetchAllMyRejectedOrderUserFailure = errorMyRejectedOrder => {\n  return {\n    type: GET_MY_ORDER_REJECTED_FAILED_USER,\n    payload: errorMyRejectedOrder\n  };\n};\n\nexport const fetchAllMyRejectedOrderUser = () => {\n  return async function (dispatch) {\n    dispatch(fetchAllMyRejectedOrderUserRequest());\n\n    try {\n      const res = await axios({\n        method: \"get\",\n        url: URL_User + '/myOrdersRejected',\n        headers: {\n          \"Accept\": \"application/json\",\n          Authorization: `Bearer ${localStorage.getItem(\"USER-TOKEN\")}`\n        }\n      });\n      const result = res.data;\n\n      if (res.data.message === \"You must be logged in\") {\n        dispatch(signOutUser());\n      } else {\n        dispatch(fetchAllMyRejectedOrderUserSucces(result));\n      }\n    } catch (errorMyRejectedOrder) {\n      dispatch(fetchAllMyRejectedOrderUserFailure(errorMyRejectedOrder.response.data));\n    }\n  };\n}; ///////////////GET ALL MY ACCEPTED ORDER ////////////////////\n\nconst fetchAllMyAcceptedOrderUserRequest = () => {\n  return {\n    type: GET_MY_ORDER_ACCEPTED_REQUEST_USER,\n    payload: {\n      loading: true\n    }\n  };\n};\n\nconst fetchAllMyAcceptedOrderUserSucces = myAcceptedOrderData => {\n  return {\n    type: GET_MY_ORDER_ACCEPTED_SUCCESS_USER,\n    payload: {\n      myAcceptedOrderData\n    }\n  };\n};\n\nconst fetchAllMyAcceptedOrderUserFailure = errorMyAcceptedOrder => {\n  return {\n    type: GET_MY_ORDER_ACCEPTED_FAILED_USER,\n    payload: errorMyAcceptedOrder\n  };\n};\n\nexport const fetchAllMyAcceptedOrderUser = () => {\n  return async function (dispatch) {\n    dispatch(fetchAllMyAcceptedOrderUserRequest());\n\n    try {\n      const res = await axios({\n        method: \"get\",\n        url: URL_User + '/myOrdersAccepted',\n        headers: {\n          \"Accept\": \"application/json\",\n          Authorization: `Bearer ${localStorage.getItem(\"USER-TOKEN\")}`\n        }\n      });\n      const result = res.data;\n\n      if (res.data.message === \"You must be logged in\") {\n        dispatch(signOutUser());\n      } else {\n        dispatch(fetchAllMyAcceptedOrderUserSucces(result));\n      }\n    } catch (errorMyAcceptedOrder) {\n      dispatch(fetchAllMyAcceptedOrderUserFailure(errorMyAcceptedOrder.response.data));\n    }\n  };\n}; ///////////////GET ALL MY PENDING ORDER /////////\n\nconst fetchAllMyPendingOrderUserRequest = () => {\n  return {\n    type: GET_MY_ORDER_PENDING_REQUEST_USER,\n    payload: {\n      loading: true\n    }\n  };\n};\n\nconst fetchAllMyPendingOrderUserSucces = myPendingOrderData => {\n  return {\n    type: GET_MY_ORDER_PENDING_SUCCESS_USER,\n    payload: {\n      myPendingOrderData\n    }\n  };\n};\n\nconst fetchAllMyPendingOrderUserFailure = errorMyPendingOrder => {\n  return {\n    type: GET_MY_ORDER_PENDING_FAILED_USER,\n    payload: errorMyPendingOrder\n  };\n};\n\nexport const fetchAllMyPendingOrderUser = () => {\n  return async function (dispatch) {\n    dispatch(fetchAllMyPendingOrderUserRequest());\n\n    try {\n      const res = await axios({\n        method: \"get\",\n        url: URL_User + '/myOrdersPending',\n        headers: {\n          \"Accept\": \"application/json\",\n          Authorization: `Bearer ${localStorage.getItem(\"USER-TOKEN\")}`\n        }\n      });\n      const result = res.data;\n\n      if (res.data.message === \"You must be logged in\") {\n        dispatch(signOutUser());\n      } else {\n        dispatch(fetchAllMyPendingOrderUserSucces(result));\n      }\n    } catch (errorMyPendingOrder) {\n      dispatch(fetchAllMyPendingOrderUserFailure(errorMyPendingOrder.response.data));\n    }\n  };\n}; ////////////POST ORDER /////////\n\nconst postOrderUserRequest = () => {\n  return {\n    type: POST_ORDER_REQUEST_USER\n  };\n};\n\nconst postOrderUserSuccess = postOrderData => {\n  return {\n    type: POST_ORDER_SUCCESS_USER,\n    payload: {\n      postOrderData\n    }\n  };\n};\n\nconst postOrderUserFailure = postOrderError => {\n  return {\n    type: POST_ORDER_FAILED_USER,\n    payload: postOrderError\n  };\n};\n\nexport const postOrder = OrderData => {\n  return async function (dispatch) {\n    dispatch(postOrderUserRequest());\n\n    try {\n      const response = await axios.post(URL_User + `/createOrder`, OrderData, {\n        headers: {\n          \"Accept\": \"application/json\",\n          Authorization: `Bearer ${localStorage.getItem(\"USER-TOKEN\")}`\n        }\n      });\n      const datas = response.data;\n\n      if (response && response.data && response.data.message && response.data.message === \"You must be logged in\") {\n        dispatch(signOutUser());\n      } else {\n        dispatch(postOrderUserSuccess(datas));\n        toast.success('Your Order Has Been Sent Check your messages with your provider');\n      }\n    } catch (postOrderError) {\n      dispatch(postOrderUserFailure(postOrderError.response.data));\n    }\n  };\n}; ///////CREATE SERVICE\n\nconst createServiceRequest = () => {\n  return {\n    type: POST_CREATE_SERVICE_REQUEST_USER\n  };\n};\n\nconst createServiceSuccess = postService => {\n  return {\n    type: POST_CREATE_SERVICE_SUCCESS_USER,\n    payload: {\n      postService\n    }\n  };\n};\n\nconst createServiceFailure = createServiceError => {\n  return {\n    type: POST_CREATE_SERVICE_FAILED_USER,\n    payload: createServiceError\n  };\n};\n\nexport const createService = postService => {\n  return async function (dispatch) {\n    dispatch(createServiceRequest());\n\n    try {\n      const response = await axios.post(URL_User + `/services`, postService, {\n        headers: {\n          \"Accept\": \"application/json\",\n          Authorization: `Bearer ${localStorage.getItem(\"USER-TOKEN\")}`\n        }\n      });\n      const data = response.data;\n\n      if (response.data.message === \"You must be logged in\") {\n        dispatch(signOutUser());\n      } else {\n        dispatch(createServiceSuccess(data));\n        toast.success(data.message);\n      }\n    } catch (createServiceError) {\n      dispatch(createServiceFailure(createServiceError.response.data));\n    }\n  };\n}; //// FETCH SUBCATEGORY BY CATEGORY_ID //////////////\n\nexport const emptySubcategory = () => {\n  return {\n    type: EMPTY_SUBCATEGORY\n  };\n};\n\nconst fectchSubcategoryByCategoryIDRequest = () => {\n  return {\n    type: GET_SUBCATEGORY_BY_CATEGORY_ID_REQUEST_USER\n  };\n};\n\nconst fectchSubcategoryByCategoryIDSuccess = fetchSubCategoryDataUser => {\n  return {\n    type: GET_SUBCATEGORY_BY_CATEGORY_ID_SUCCESS_USER,\n    payload: {\n      fetchSubCategoryDataUser\n    }\n  };\n};\n\nconst fectchSubcategoryByCategoryIDFailure = fetchSubCategoryDataUsererror => {\n  return {\n    type: GET_SUBCATEGORY_BY_CATEGORY_ID_FAILED_USER,\n    payload: fetchSubCategoryDataUsererror\n  };\n};\n\nexport const fetchSubcategoryByCategoryID = category_id => {\n  return async function (dispatch) {\n    dispatch(fectchSubcategoryByCategoryIDRequest());\n\n    try {\n      const response = await axios({\n        method: \"get\",\n        url: URL_User + `/getSubcategoryByCategoryId/${category_id}`,\n        headers: {\n          \"Content-type\": \"application/json\",\n          \"Accept\": \"application/json\",\n          Authorization: `Bearer ${localStorage.getItem(\"USER-TOKEN\")}`\n        }\n      });\n      const data = response.data;\n\n      if (response.data.message === \"You must be logged in\") {\n        dispatch(signOutUser());\n      } else {\n        dispatch(fectchSubcategoryByCategoryIDSuccess(data));\n      }\n    } catch (fetchSubCategoryDataUsererror) {\n      dispatch(fectchSubcategoryByCategoryIDFailure(fetchSubCategoryDataUsererror));\n    }\n  };\n}; ////// FETCH ALL CATEGORY //////\n\nconst fetchAllCategoryRequestUser = () => {\n  return {\n    type: GET_ALL_CATEGORY_REQUEST_USER,\n    payload: {\n      loading: true\n    }\n  };\n};\n\nconst fetchAllCategorySuccessUser = categoryUserDataUser => {\n  return {\n    type: GET_ALL_CATEGORY_SUCCESS_USER,\n    payload: {\n      categoryUserDataUser\n    }\n  };\n};\n\nconst fetchAllCategoryFaillureUser = errorCategoryUser => {\n  return {\n    type: GET_ALL_CATEGORY_FAILED_USER,\n    payload: errorCategoryUser\n  };\n};\n\nexport const fetchAllCategoryUser = payload => {\n  return async function (dispatch) {\n    dispatch(fetchAllCategoryRequestUser());\n\n    try {\n      const res = await axios({\n        method: \"get\",\n        url: URL_User + '/getAllCategory',\n        data: payload,\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"USER-TOKEN\")}`\n        }\n      });\n\n      if (res.data.message === \"You must be logged in\") {\n        dispatch(signOutUser());\n      } else {\n        const result = res.data.category;\n        dispatch(fetchAllCategorySuccessUser(result));\n      }\n    } catch (errorCategoryUser) {\n      dispatch(fetchAllCategoryFaillureUser(errorCategoryUser.response.data));\n    }\n  };\n}; ////// FETCH ALL ACCEPTED CATEGORY //////\n\nconst fetchAllAcceptedCategoryRequest = () => {\n  return {\n    type: GET_ALL_CATEGORY_ACCEPTED_REQUEST_USER,\n    payload: {\n      loading: true\n    }\n  };\n};\n\nconst fetchAllAcceptedCategorySuccess = acceptedCategoryUserDataUser => {\n  return {\n    type: GET_ALL_CATEGORY_ACCEPTED_SUCCESS_USER,\n    payload: {\n      acceptedCategoryUserDataUser\n    }\n  };\n};\n\nconst fetchAllAcceptedCategoryFaillure = errorAcceptedCategoryUser => {\n  return {\n    type: GET_ALL_CATEGORY_ACCEPTED_FAILED_USER,\n    payload: errorAcceptedCategoryUser\n  };\n};\n\nexport const fetchAcceptedCategoryUser = payload => {\n  return async function (dispatch) {\n    dispatch(fetchAllAcceptedCategoryRequest());\n\n    try {\n      const res = await axios({\n        method: \"get\",\n        url: URL_User + '/getAllAcceptedCategory',\n        data: payload,\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"USER-TOKEN\")}`\n        }\n      });\n\n      if (res.data.message === \"You must be logged in\") {\n        dispatch(signOutUser());\n      } else {\n        const result = res.data.data;\n        dispatch(fetchAllAcceptedCategorySuccess(result));\n      }\n    } catch (errorAcceptedCategoryUser) {\n      dispatch(fetchAllAcceptedCategoryFaillure(errorAcceptedCategoryUser.response.data));\n    }\n  };\n}; /////////////////FETCH ALL ROOMS////////////\n\nconst fetchAllRoomsRequestUser = () => {\n  return {\n    type: GET_ROOMS_REQUEST_USER,\n    payload: {\n      loading: true\n    }\n  };\n};\n\nconst fetchAllRoomsSuccessUser = roomsUserData => {\n  return {\n    type: GET_ROOMS_SUCCESS_USER,\n    payload: {\n      roomsUserData\n    }\n  };\n};\n\nconst fetchAllRoomsFaillureUser = errorRooms => {\n  return {\n    type: GET_ROOMS_FAILED_USER,\n    payload: errorRooms\n  };\n};\n\nexport const fetchAllRoomsUser = payload => {\n  return async function (dispatch) {\n    dispatch(fetchAllRoomsRequestUser());\n\n    try {\n      const res = await axios({\n        method: \"get\",\n        url: URL_User + '/getAllRooms',\n        data: payload,\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"USER-TOKEN\")}`\n        }\n      });\n\n      if (res.data.message === \"You must be logged in\") {\n        dispatch(signOutUser());\n      } else {\n        const result = res.data;\n        dispatch(fetchAllRoomsSuccessUser(result));\n      }\n    } catch (errorRooms) {\n      dispatch(fetchAllRoomsFaillureUser(errorRooms.response.data));\n    }\n  };\n}; //// /////////////CONTACT  SELLER //////////////\n\nconst contactSellerRequest = () => {\n  return {\n    type: CONTACT_SELLER_REQUEST_USER\n  };\n};\n\nconst contactSellerSuccess = contactData => {\n  return {\n    type: CONTACT_SELLER_SUCCESS_USER,\n    payload: {\n      contactData\n    }\n  };\n};\n\nconst contactSellerFailure = contactError => {\n  return {\n    type: CONTACT_SELLER_FAILED_USER,\n    payload: contactError\n  };\n};\n\nexport const contactSeller = contactData => {\n  return async function (dispatch) {\n    dispatch(contactSellerRequest());\n\n    try {\n      const response = await axios.post(URL_User + `/contactSeller`, contactData, {\n        headers: {\n          \"Accept\": \"application/json\",\n          Authorization: `Bearer ${localStorage.getItem(\"USER-TOKEN\")}`\n        }\n      });\n      const data = response.data;\n\n      if (response.data.message === \"You must be logged in\") {\n        dispatch(signOutUser());\n      } else {\n        dispatch(contactSellerSuccess(data));\n        toast.success('Message Sent');\n      }\n    } catch (contactError) {\n      dispatch(contactSellerFailure(contactError.response.data));\n    }\n  };\n}; // SIGN UP USER\n\nconst signUpRequestUser = () => {\n  return {\n    type: SIGN_UP_USER_REQUEST\n  };\n};\n\nconst signUpSuccessUser = user => {\n  return {\n    type: SIGN_UP_USER_SUCCESS,\n    payload: {\n      user\n    }\n  };\n};\n\nconst signUpFailureUser = error => {\n  return {\n    type: SIGN_UP_USER_FAILURE,\n    payload: error.errors\n  };\n};\n\nexport const signUpUser = (user, history) => {\n  return async function (dispatch) {\n    dispatch(signUpRequestUser());\n\n    try {\n      const res = await axios({\n        method: \"post\",\n        url: URL_User + '/register',\n        data: user\n      });\n      const {\n        data\n      } = res.data;\n\n      if (res.data.success === false && res.status === 200 && res.data.errors) {\n        dispatch(signUpSuccessUser(res.data.erros));\n        toast.success('Succefully Registered');\n      } else {\n        dispatch(signUpFailureUser(data));\n      }\n    } catch (error) {\n      if (error.response && error.response.status === 400) {\n        dispatch(signUpFailureUser(error.response.data));\n      } else {\n        dispatch(signUpFailureUser(error));\n      }\n    }\n  };\n}; //Sign in  USER\n\nconst signInRequestUser = () => {\n  return {\n    type: SIGN_IN_USER_REQUEST\n  };\n};\n\nconst signInSuccessUser = payload => {\n  return {\n    type: SIGN_IN_USER_SUCCESS,\n    payload\n  };\n};\n\nconst signInFailureUser = error => {\n  return {\n    type: SIGN_IN_USER_FAILURE,\n    payload: error\n  };\n};\n\nexport const signinUser = (payload, history) => {\n  return async function (dispatch) {\n    dispatch(signInRequestUser);\n\n    try {\n      const res = await axios({\n        method: \"POST\",\n        url: URL_User + \"/login\",\n        data: payload,\n        headers: {\n          \"Content-type\": \"application/json\",\n          \"Accept\": \"application/json\"\n        }\n      });\n      const {\n        access_token,\n        id,\n        user_name: {\n          name\n        }\n      } = res.data;\n      localStorage.setItem(\"USER-TOKEN\", access_token); // localStorage.setItem(\"USER-EMAIL\",email);\n\n      localStorage.setItem(\"USER-ID\", id);\n      localStorage.setItem(\"USER-NAME\", name);\n      dispatch(signInSuccessUser({\n        access_token,\n        id,\n        name\n      }));\n      toast.success('Succefully Logged in');\n    } catch (error) {\n      if (error.response && error.response.status === 404) {\n        dispatch(signInFailureUser(error.response.data));\n      } else {\n        dispatch(signUpFailureUser(error));\n      }\n    }\n  };\n}; // sign out USER\n\nexport const signOutRequestUser = () => {\n  return {\n    type: SIGN_OUT_USER_REQUEST\n  };\n};\nexport const signOutSuccessUser = () => {\n  return {\n    type: SIGN_OUT_USER_SUCCESS\n  };\n};\nexport const signOutFailureUser = () => {\n  return {\n    type: SIGN_OUT_USER_FAILURE\n  };\n};\nexport const signOutUser = () => {\n  return async function (dispatch) {\n    dispatch(signOutRequestUser());\n\n    try {\n      const res = await axios({\n        method: \"POST\",\n        url: URL_User + \"/logout\",\n        headers: {\n          \"Content-type\": \"application/json\",\n          \"Accept\": \"application/json\"\n        }\n      });\n      localStorage.removeItem(\"USER-TOKEN\"); // localStorage.removeItem(\"USER-EMAIL\");\n\n      localStorage.removeItem(\"USER-ID\");\n      localStorage.removeItem(\"USER-NAME\");\n      toast.success('Logged out');\n    } catch (error) {\n      if (localStorage.getItem(\"USER-TOKEN\") !== null) {\n        dispatch(signOutFailureUser());\n      } else {\n        dispatch(signOutSuccessUser());\n      }\n    }\n  };\n}; ///////////////////////////////////////GUEST /////////////////////////////\n/////// FETCH ALL SUBCATEGORY CATEGORY AND SERVICES //////////////////////////////\n\nconst fetchAllDataGuestRequest = () => {\n  return {\n    type: GET_ALL_SUCATEGORY_CATEGORY_SERVICE_REQUEST_GUEST,\n    payload: {\n      loading: true\n    }\n  };\n};\n\nconst fetchAllDataGuestSuccess = guestData => {\n  return {\n    type: GET_ALL_SUCATEGORY_CATEGORY_SERVICE_SUCCESS_GUEST,\n    payload: {\n      guestData\n    }\n  };\n};\n\nconst fetchAllDataGuestFailure = errorDataGuest => {\n  return {\n    type: GET_ALL_SUCATEGORY_CATEGORY_SERVICE_FAILED_GUEST,\n    payload: errorDataGuest\n  };\n};\n\nexport const fetchAllDataGuest = payload => {\n  return async function (dispatch) {\n    dispatch(fetchAllDataGuestRequest());\n\n    try {\n      const res = await axios({\n        method: \"get\",\n        url: URL_Guest + '/categories'\n      });\n      const result = res.data;\n      let payload = []; ///////////CAT AND SUB AND SERVICES/////////\n      // result.map((cat)=>{\n      //     if(cat.length!==0 && cat.subcategories_accepted.length>0 ){\n      //         console.log(cat)\n      //       payload.push(cat);\n      //     }\n      // })\n      ///////////CAT AND SUB AND SERVICES/////////\n      //////////HOLY CODE /////////////////////////////HOLY CODE /////////////////////////////HOLY CODE /////////////////////////////HOLY CODE ///////////////////\n      //  result.map((res)=>{\n      //     if(res.subcategories_accepted.length>0){\n      //           res.subcategories_accepted.map((result)=>  {\n      //              if(result.services_accepted.length>0){\n      //                       payload=[...payload,  \n      //                         ...result.services_accepted,\n      //                     ];\n      //           }\n      //     });\n      // }});\n      //////////HOLY CODE /////////////////////////////HOLY CODE /////////////////////////////HOLY CODE ///////////////////\n      // result.map((res)=>{\n      //     if(res.subcategories_accepted.length>0){\n      //           res.subcategories_accepted.map((result)=>  {\n      //              if(result.services_accepted.length>0){\n      //                       payload=[...payload,  ...result.services_accepted];\n      //           }\n      //     });\n      // }});\n      ///////////////// SERVICES ONLY ///////\n      /////////you get sub and services//////////////\n\n      result.map(res => {\n        if (res.subcategories_accepted.length > 0) {\n          res.subcategories_accepted.map(result => {\n            if (result.services_accepted.length > 0) {\n              result.services_accepted.map(value => {\n                payload = [...payload, { ...value,\n                  subcategory: result,\n                  category: res\n                }];\n              });\n            }\n          });\n        }\n      }); /////////you get sub and services//////////////\n\n      dispatch({\n        type: ACCEPTED_SERVICES,\n        payload\n      });\n      dispatch(fetchAllDataGuestSuccess(result)); // dispatch(fetchAllAcceptedServicesFailure(\"\")); \n    } catch (errorDataGuest) {\n      dispatch(fetchAllDataGuestFailure(errorDataGuest.response.data));\n    }\n  };\n}; /////////////////FETCH ILLUSTRATOR GUEST ////////////////\n\nconst fetchIlllustratorGuestRequest = () => {\n  return {\n    type: GET_ALL_SUB_ILLUSTRATOR_SERVICE_REQUEST_GUEST,\n    payload: {\n      loading: true\n    }\n  };\n};\n\nconst fetchIlllustratorGuestSuccess = guestIllustratorData => {\n  return {\n    type: GET_ALL_SUB_ILLUSTRATOR_SERVICE_SUCCESS_GUEST,\n    payload: {\n      guestIllustratorData\n    }\n  };\n};\n\nconst fetchIlllustratorGuestFailure = errorIllustratorDataGuest => {\n  return {\n    type: GET_ALL_SUB_ILLUSTRATOR_SERVICE_FAILED_GUEST,\n    payload: errorIllustratorDataGuest\n  };\n};\n\nexport const fetchIllustratorDataGuest = payload => {\n  return async function (dispatch) {\n    dispatch(fetchIlllustratorGuestRequest());\n\n    try {\n      const res = await axios({\n        method: \"get\",\n        url: URL_Guest + '/paginateServiceSubcategory'\n      });\n      const result = res.data;\n      dispatch(fetchIlllustratorGuestSuccess(result));\n    } catch (errorDataGuest) {\n      dispatch(fetchIlllustratorGuestFailure(errorDataGuest.response.data));\n    }\n  };\n}; ////////////GET COMMENTS ////////////////////////\n\nconst getCommentsRequestGuest = () => {\n  return {\n    type: GET_COMMENT_REQUEST_GUEST\n  };\n};\n\nconst getCommentsSuccessGuest = commentsData => {\n  return {\n    type: GET_COMMENT_SUCCESS_GUEST,\n    payload: commentsData\n  };\n};\n\nconst getCommentsFailedGuest = ErrorGetComments => {\n  return {\n    type: GET_COMMENT_FAILED_GUEST,\n    payload: ErrorGetComments\n  };\n};\n\nexport const getCommentsGuest = service_id => {\n  return async function (dispatch) {\n    dispatch(getCommentsRequestGuest());\n\n    try {\n      const response = await axios({\n        method: \"get\",\n        url: URL_Guest + `/getComments/${service_id}`\n      });\n      const data = response.data;\n      dispatch(getCommentsSuccessGuest(data));\n    } catch (ErrorGetComments) {\n      dispatch(getCommentsFailedGuest(ErrorGetComments.response.data));\n    }\n  };\n}; /////////////////FETCH VOICE GUEST ////////////////\n\nconst fetchVoiceGuestRequest = () => {\n  return {\n    type: GET_ALL_SUB_VOICE_SERVICE_REQUEST_GUEST,\n    payload: {\n      loading: true\n    }\n  };\n};\n\nconst fetchVoiceGuestSuccess = guestVoiceData => {\n  return {\n    type: GET_ALL_SUB_VOICE_SERVICE_SUCCESS_GUEST,\n    payload: {\n      guestVoiceData\n    }\n  };\n};\n\nconst fetchVoiceGuestFailure = errorVoiceDataGuest => {\n  return {\n    type: GET_ALL_SUB_VOICE_SERVICE_FAILED_GUEST,\n    payload: errorVoiceDataGuest\n  };\n};\n\nexport const fetchVoiceGuest = payload => {\n  return async function (dispatch) {\n    dispatch(fetchVoiceGuestRequest());\n\n    try {\n      const res = await axios({\n        method: \"get\",\n        url: URL_Guest + '/paginateServiceSubcategory5'\n      });\n      const result = res.data;\n      dispatch(fetchVoiceGuestSuccess(result));\n    } catch (errorVoiceDataGuest) {\n      dispatch(fetchVoiceGuestFailure(errorVoiceDataGuest.response.data));\n    }\n  };\n};","map":{"version":3,"sources":["/Users/chrishar/Documents/CODI/Final project/Siverr/frontend/src/redux/action-creators.js"],"names":["axios","SIGN_IN_ADMIN_FAILURE","SIGN_IN_ADMIN_REQUEST","SIGN_IN_ADMIN_SUCCESS","SIGN_UP_ADMIN_FAILURE","SIGN_UP_ADMIN_REQUEST","SIGN_UP_ADMIN_SUCCESS","SIGN_OUT_ADMIN_FAILURE","SIGN_OUT_ADMIN_REQUEST","SIGN_OUT_ADMIN_SUCCESS","GET_ALL_SERVICES_PENDING_REQUEST_ADMIN","GET_ALL_SERVICES_PENDING_SUCCESS_ADMIN","GET_ALL_SERVICES_PENDING_FAILURE_ADMIN","GET_ALL_SERVICES_ACCEPTED_REQUEST_ADMIN","GET_ALL_SERVICES_ACCEPTED_SUCCESS_ADMIN","GET_ALL_SERVICES_ACCEPTED_FAILURE_ADMIN","GET_ALL_SERVICES_REJECTED_REQUEST_ADMIN","GET_ALL_SERVICES_REJECTED_SUCCESS_ADMIN","GET_ALL_SERVICES_REJECTED_FAILURE_ADMIN","REJECT_SERVICE_PENDING_REQUEST_ADMIN","REJECT_SERVICE_PENDING_SUCCESS_ADMIN","REJECT_SERVICE_PENDING_FAILED_ADMIN","ACCCEPT_SERVICE_REQUEST_ADMIN","ACCCEPT_SERVICE_SUCCESS_ADMIN","ACCCEPT_SERVICE_FAILED_ADMIN","SIGN_IN_USER_FAILURE","SIGN_IN_USER_REQUEST","SIGN_IN_USER_SUCCESS","SIGN_UP_USER_FAILURE","SIGN_UP_USER_REQUEST","SIGN_UP_USER_SUCCESS","SIGN_OUT_USER_FAILURE","SIGN_OUT_USER_REQUEST","SIGN_OUT_USER_SUCCESS","ACCEPTED","REJECTED","PENDING","GET_ALL_CATEGORY_ACCEPTED_REQUEST_USER","GET_ALL_CATEGORY_ACCEPTED_SUCCESS_USER","GET_ALL_CATEGORY_ACCEPTED_FAILED_USER","GET_SUBCATEGORY_BY_CATEGORY_ID_REQUEST_USER","GET_SUBCATEGORY_BY_CATEGORY_ID_SUCCESS_USER","GET_SUBCATEGORY_BY_CATEGORY_ID_FAILED_USER","EMPTY_SUBCATEGORY","POST_CREATE_SERVICE_REQUEST_USER","POST_CREATE_SERVICE_SUCCESS_USER","POST_CREATE_SERVICE_FAILED_USER","GET_ALL_CATEGORY_REQUEST_USER","GET_ALL_CATEGORY_SUCCESS_USER","GET_ALL_CATEGORY_FAILED_USER","GET_ROOMS_REQUEST_USER","GET_ROOMS_SUCCESS_USER","GET_ROOMS_FAILED_USER","CONTACT_SELLER_REQUEST_USER","CONTACT_SELLER_SUCCESS_USER","CONTACT_SELLER_FAILED_USER","POST_ORDER_REQUEST_USER","POST_ORDER_SUCCESS_USER","POST_ORDER_FAILED_USER","GET_MY_ORDER_PENDING_REQUEST_USER","GET_MY_ORDER_PENDING_SUCCESS_USER","GET_MY_ORDER_PENDING_FAILED_USER","GET_MY_ORDER_ACCEPTED_REQUEST_USER","GET_MY_ORDER_ACCEPTED_SUCCESS_USER","GET_MY_ORDER_ACCEPTED_FAILED_USER","GET_MY_ORDER_REJECTED_REQUEST_USER","GET_MY_ORDER_REJECTED_SUCCESS_USER","GET_MY_ORDER_REJECTED_FAILED_USER","GET_RECEIVED_ORDER_PENDING_REQUEST_USER","GET_RECEIVED_ORDER_PENDING_SUCCESS_USER","GET_RECEIVED_ORDER_PENDING_FAILED_USER","GET_RECEIVED_ORDER_ACCEPTED_REQUEST_USER","GET_RECEIVED_ORDER_ACCEPTED_SUCCESS_USER","GET_RECEIVED_ORDER_ACCEPTED_FAILED_USER","GET_RECEIVED_ORDER_REJECTED_REQUEST_USER","GET_RECEIVED_ORDER_REJECTED_SUCCESS_USER","GET_RECEIVED_ORDER_REJECTED_FAILED_USER","POST_ACCEPT_ORDER_REQUEST_USER","POST_ACCEPT_ORDER_SUCCESS_USER","POST_ACCEPT_ORDER_FAILED_USER","POST_REJECT_ORDER_REQUEST_USER","POST_REJECT_ORDER_SUCCESS_USER","POST_REJECT_ORDER_FAILED_USER","POST_COMMENT_REQUEST_USER","POST_COMMENT_SUCCESS_USER","POST_COMMENT_FAILED_USER","GET_MY_SERVICE_PENDING_REQUEST_USER","GET_MY_SERVICE_PENDING_SUCCESS_USER","GET_MY_SERVICE_PENDING_FAILED_USER","GET_MY_SERVICE_ACCEPTED_REQUEST_USER","GET_MY_SERVICE_ACCEPTED_SUCCESS_USER","GET_MY_SERVICE_ACCEPTED_FAILED_USER","GET_MY_SERVICE_REJECTED_REQUEST_USER","GET_MY_SERVICE_REJECTED_SUCCESS_USER","GET_MY_SERVICE_REJECTED_FAILED_USER","GET_ALL_SUCATEGORY_CATEGORY_SERVICE_REQUEST_GUEST","GET_ALL_SUCATEGORY_CATEGORY_SERVICE_SUCCESS_GUEST","GET_ALL_SUCATEGORY_CATEGORY_SERVICE_FAILED_GUEST","ACCEPTED_SERVICES","GET_ALL_SUB_ILLUSTRATOR_SERVICE_REQUEST_GUEST","GET_ALL_SUB_ILLUSTRATOR_SERVICE_SUCCESS_GUEST","GET_ALL_SUB_ILLUSTRATOR_SERVICE_FAILED_GUEST","GET_ALL_SUB_VOICE_SERVICE_REQUEST_GUEST","GET_ALL_SUB_VOICE_SERVICE_SUCCESS_GUEST","GET_ALL_SUB_VOICE_SERVICE_FAILED_GUEST","GET_COMMENT_REQUEST_GUEST","GET_COMMENT_SUCCESS_GUEST","GET_COMMENT_FAILED_GUEST","toast","URL_Admin","URL_Guest","URL_User","rejectServiceRequestAdmin","type","rejectServiceSuccessAdmin","rejectServiceAdminData","payload","rejectServiceFailureAdmin","rejectServiceDataError","rejectServiceAdmin","reason_for_rejection","service_id","dispatch","response","method","url","headers","Authorization","localStorage","getItem","data","message","signOutAdmin","accepteServiceRequestAdmin","accepteServiceSuccessAdmin","acceptedServiceAdminData","accepteServiceFailureAdmin","acceptedServiceDataError","acceptServiceAdmin","success","pendingScreen","rejectedScreen","acceptedScreen","fetchAllRejectedServicesRequest","loading","fetchAllRejectedServicesSuccess","rejectedServiceData","fetchAllRejectedServicesFailure","errorRejected","fetchRejectedServices","res","result","fetchAllAcceptedServicesRequest","fetchAllAcceptedServicesSuccess","acceptedServiceData","fetchAllAcceptedServicesFailure","errorAccepted","fetchAcceptedServices","fetchAllPendingServicesRequest","fetchAllPendingServicesSuccess","pendingServiceData","fetchAllPendingServicesFailure","errorPending","fetchPendingServices","signUpRequestAdmin","signUpSuccessAdmin","user","signUpFailureAdmin","error","signUpAdmin","history","push","signInRequestAdmin","signInSuccessAdmin","signInFailureAdmin","signinAdmin","access_token","name","setItem","status","signOutRequestAdmin","signOutSuccessAdmin","signOutFailureAdmin","removeItem","fetchAllMyRejectedServiceUserRequest","fetchAllMyRejectedServiceUserSuccess","myServiceRejectedData","fetchAllMyRejectedServiceUserFailure","errorMyServiceRejected","fetchAllMyRejectedServiceUser","signOutUser","errorMyServiceAccepted","fetchAllMyAcceptedServiceUserRequest","fetchAllMyAcceptedServiceUserSuccess","myServiceAcceptedData","fetchAllMyAcceptedServiceUserFailure","fetchAllMyAcceptedServiceUser","console","log","fetchAllMyPendingServiceUserRequest","fetchAllMyPendingServiceUserSuccess","myServicePendingData","fetchAllMyPendingServiceUserFailure","errorMyServicePending","fetchAllMyPendingServiceUser","postCommentRequestUser","postCommentSuccessUser","commentData","postCommentFailureUser","ErrorComment","postCommentUser","comment_data","rejectOrderRequestUser","rejectOrderSuccessUser","rejectOrderData","rejectOrderFailureUser","ErrorRejectOrder","rejectOrderUser","rejectOrder_id","acceptOrderRequestUser","acceptOrderSuccessUser","acceptOrderData","acceptOrderFailureUser","ErroracceptOrder","acceptOrderUser","fetchAllRecievedRejectedOrderUserRequest","fetchAllRecievedRejectedOrderUserSuccess","receivedRejectedOrderData","fetchAllRecievedRejectedOrderUserFailure","errorRecievedRejectedOrder","fetchAllRecievedRejectedOrderUser","map","orders_rejected","length","result2","service","fetchAllRecievedAcceptedOrderUserRequest","fetchAllRecievedAcceptedOrderUserSuccess","receivedAcceptedOrderData","fetchAllRecievedAcceptedOrderUserFailure","errorRecievedAcceptedOrder","fetchAllRecievedAcceptedOrderUser","orders_accepted","fetchAllRecievedPendingOrderUserRequest","fetchAllRecievedPendingOrderUserSuccess","receivedPendingOrderData","fetchAllRecievedPendingOrderUserFailure","errorRecievedPendingOrder","fetchAllRecievedPendingOrderUser","orders_pending","fetchAllMyRejectedOrderUserRequest","fetchAllMyRejectedOrderUserSucces","myRejectedOrderData","fetchAllMyRejectedOrderUserFailure","errorMyRejectedOrder","fetchAllMyRejectedOrderUser","fetchAllMyAcceptedOrderUserRequest","fetchAllMyAcceptedOrderUserSucces","myAcceptedOrderData","fetchAllMyAcceptedOrderUserFailure","errorMyAcceptedOrder","fetchAllMyAcceptedOrderUser","fetchAllMyPendingOrderUserRequest","fetchAllMyPendingOrderUserSucces","myPendingOrderData","fetchAllMyPendingOrderUserFailure","errorMyPendingOrder","fetchAllMyPendingOrderUser","postOrderUserRequest","postOrderUserSuccess","postOrderData","postOrderUserFailure","postOrderError","postOrder","OrderData","post","datas","createServiceRequest","createServiceSuccess","postService","createServiceFailure","createServiceError","createService","emptySubcategory","fectchSubcategoryByCategoryIDRequest","fectchSubcategoryByCategoryIDSuccess","fetchSubCategoryDataUser","fectchSubcategoryByCategoryIDFailure","fetchSubCategoryDataUsererror","fetchSubcategoryByCategoryID","category_id","fetchAllCategoryRequestUser","fetchAllCategorySuccessUser","categoryUserDataUser","fetchAllCategoryFaillureUser","errorCategoryUser","fetchAllCategoryUser","category","fetchAllAcceptedCategoryRequest","fetchAllAcceptedCategorySuccess","acceptedCategoryUserDataUser","fetchAllAcceptedCategoryFaillure","errorAcceptedCategoryUser","fetchAcceptedCategoryUser","fetchAllRoomsRequestUser","fetchAllRoomsSuccessUser","roomsUserData","fetchAllRoomsFaillureUser","errorRooms","fetchAllRoomsUser","contactSellerRequest","contactSellerSuccess","contactData","contactSellerFailure","contactError","contactSeller","signUpRequestUser","signUpSuccessUser","signUpFailureUser","errors","signUpUser","erros","signInRequestUser","signInSuccessUser","signInFailureUser","signinUser","id","user_name","signOutRequestUser","signOutSuccessUser","signOutFailureUser","fetchAllDataGuestRequest","fetchAllDataGuestSuccess","guestData","fetchAllDataGuestFailure","errorDataGuest","fetchAllDataGuest","subcategories_accepted","services_accepted","value","subcategory","fetchIlllustratorGuestRequest","fetchIlllustratorGuestSuccess","guestIllustratorData","fetchIlllustratorGuestFailure","errorIllustratorDataGuest","fetchIllustratorDataGuest","getCommentsRequestGuest","getCommentsSuccessGuest","commentsData","getCommentsFailedGuest","ErrorGetComments","getCommentsGuest","fetchVoiceGuestRequest","fetchVoiceGuestSuccess","guestVoiceData","fetchVoiceGuestFailure","errorVoiceDataGuest","fetchVoiceGuest"],"mappings":"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","sourcesContent":["import axios from 'axios';\n\nimport {\n    SIGN_IN_ADMIN_FAILURE,\n    SIGN_IN_ADMIN_REQUEST,\n    SIGN_IN_ADMIN_SUCCESS,\n    SIGN_UP_ADMIN_FAILURE,\n    SIGN_UP_ADMIN_REQUEST,\n    SIGN_UP_ADMIN_SUCCESS,\n    SIGN_OUT_ADMIN_FAILURE,\n    SIGN_OUT_ADMIN_REQUEST,\n    SIGN_OUT_ADMIN_SUCCESS,\n\n    GET_ALL_SERVICES_PENDING_REQUEST_ADMIN,\n    GET_ALL_SERVICES_PENDING_SUCCESS_ADMIN,\n    GET_ALL_SERVICES_PENDING_FAILURE_ADMIN,\n    GET_ALL_SERVICES_ACCEPTED_REQUEST_ADMIN,\n    GET_ALL_SERVICES_ACCEPTED_SUCCESS_ADMIN,\n    GET_ALL_SERVICES_ACCEPTED_FAILURE_ADMIN,\n    GET_ALL_SERVICES_REJECTED_REQUEST_ADMIN,\n    GET_ALL_SERVICES_REJECTED_SUCCESS_ADMIN,\n    GET_ALL_SERVICES_REJECTED_FAILURE_ADMIN,\n\n    REJECT_SERVICE_PENDING_REQUEST_ADMIN,\n    REJECT_SERVICE_PENDING_SUCCESS_ADMIN,\n    REJECT_SERVICE_PENDING_FAILED_ADMIN,\n\n    ACCCEPT_SERVICE_REQUEST_ADMIN,\n    ACCCEPT_SERVICE_SUCCESS_ADMIN,\n    ACCCEPT_SERVICE_FAILED_ADMIN,\n\n    SIGN_IN_USER_FAILURE,\n    SIGN_IN_USER_REQUEST,\n    SIGN_IN_USER_SUCCESS,\n    SIGN_UP_USER_FAILURE,\n    SIGN_UP_USER_REQUEST,\n    SIGN_UP_USER_SUCCESS,\n    SIGN_OUT_USER_FAILURE,\n    SIGN_OUT_USER_REQUEST,\n    SIGN_OUT_USER_SUCCESS,\n\n    ACCEPTED,\n    REJECTED,\n    PENDING,\n\n    GET_ALL_CATEGORY_ACCEPTED_REQUEST_USER,\n    GET_ALL_CATEGORY_ACCEPTED_SUCCESS_USER,\n    GET_ALL_CATEGORY_ACCEPTED_FAILED_USER,\n\n    GET_SUBCATEGORY_BY_CATEGORY_ID_REQUEST_USER,\n    GET_SUBCATEGORY_BY_CATEGORY_ID_SUCCESS_USER,\n    GET_SUBCATEGORY_BY_CATEGORY_ID_FAILED_USER,\n    EMPTY_SUBCATEGORY,\n\n    POST_CREATE_SERVICE_REQUEST_USER,\n    POST_CREATE_SERVICE_SUCCESS_USER,\n    POST_CREATE_SERVICE_FAILED_USER,\n\n    GET_ALL_CATEGORY_REQUEST_USER,\n    GET_ALL_CATEGORY_SUCCESS_USER,\n    GET_ALL_CATEGORY_FAILED_USER,\n\n    GET_ROOMS_REQUEST_USER,\n    GET_ROOMS_SUCCESS_USER,\n    GET_ROOMS_FAILED_USER,\n\n    CONTACT_SELLER_REQUEST_USER,\n    CONTACT_SELLER_SUCCESS_USER,\n    CONTACT_SELLER_FAILED_USER,\n\n    POST_ORDER_REQUEST_USER,\n    POST_ORDER_SUCCESS_USER,\n    POST_ORDER_FAILED_USER,\n\n    GET_MY_ORDER_PENDING_REQUEST_USER,\n    GET_MY_ORDER_PENDING_SUCCESS_USER,\n    GET_MY_ORDER_PENDING_FAILED_USER,\n\n    GET_MY_ORDER_ACCEPTED_REQUEST_USER,\n    GET_MY_ORDER_ACCEPTED_SUCCESS_USER,\n    GET_MY_ORDER_ACCEPTED_FAILED_USER,\n\n    GET_MY_ORDER_REJECTED_REQUEST_USER,\n    GET_MY_ORDER_REJECTED_SUCCESS_USER,\n    GET_MY_ORDER_REJECTED_FAILED_USER,\n\n    GET_RECEIVED_ORDER_PENDING_REQUEST_USER,\n    GET_RECEIVED_ORDER_PENDING_SUCCESS_USER,\n    GET_RECEIVED_ORDER_PENDING_FAILED_USER,\n\n    GET_RECEIVED_ORDER_ACCEPTED_REQUEST_USER,\n    GET_RECEIVED_ORDER_ACCEPTED_SUCCESS_USER,\n    GET_RECEIVED_ORDER_ACCEPTED_FAILED_USER,\n\n    GET_RECEIVED_ORDER_REJECTED_REQUEST_USER,\n    GET_RECEIVED_ORDER_REJECTED_SUCCESS_USER,\n    GET_RECEIVED_ORDER_REJECTED_FAILED_USER,\n\n    POST_ACCEPT_ORDER_REQUEST_USER,\n    POST_ACCEPT_ORDER_SUCCESS_USER,\n    POST_ACCEPT_ORDER_FAILED_USER,\n\n    POST_REJECT_ORDER_REQUEST_USER,\n    POST_REJECT_ORDER_SUCCESS_USER,\n    POST_REJECT_ORDER_FAILED_USER,\n\n    POST_COMMENT_REQUEST_USER,\n    POST_COMMENT_SUCCESS_USER,\n    POST_COMMENT_FAILED_USER,\n\n    GET_MY_SERVICE_PENDING_REQUEST_USER,\n    GET_MY_SERVICE_PENDING_SUCCESS_USER,\n    GET_MY_SERVICE_PENDING_FAILED_USER,\n\n    GET_MY_SERVICE_ACCEPTED_REQUEST_USER,\n    GET_MY_SERVICE_ACCEPTED_SUCCESS_USER,\n    GET_MY_SERVICE_ACCEPTED_FAILED_USER,\n\n    GET_MY_SERVICE_REJECTED_REQUEST_USER,\n    GET_MY_SERVICE_REJECTED_SUCCESS_USER,\n    GET_MY_SERVICE_REJECTED_FAILED_USER,\n\n\n    GET_ALL_SUCATEGORY_CATEGORY_SERVICE_REQUEST_GUEST,\n    GET_ALL_SUCATEGORY_CATEGORY_SERVICE_SUCCESS_GUEST,\n    GET_ALL_SUCATEGORY_CATEGORY_SERVICE_FAILED_GUEST,\n    ACCEPTED_SERVICES,\n\n    GET_ALL_SUB_ILLUSTRATOR_SERVICE_REQUEST_GUEST,\n    GET_ALL_SUB_ILLUSTRATOR_SERVICE_SUCCESS_GUEST,\n    GET_ALL_SUB_ILLUSTRATOR_SERVICE_FAILED_GUEST, \n\n    GET_ALL_SUB_VOICE_SERVICE_REQUEST_GUEST,\n    GET_ALL_SUB_VOICE_SERVICE_SUCCESS_GUEST,\n    GET_ALL_SUB_VOICE_SERVICE_FAILED_GUEST,\n\n    GET_COMMENT_REQUEST_GUEST,\n    GET_COMMENT_SUCCESS_GUEST,\n    GET_COMMENT_FAILED_GUEST,\n\n} from './action-types';\n\nimport {toast} from \"react-toastify\";\n\nimport { URL_Admin,URL_Guest,URL_User } from \"../components/URL\";\n\n//////////////////////////////ADMIN/////////////////////////////////////////////////////////\n\n/////////////////////REJECT PENDING REQUEST /////////////////////////////////\nconst rejectServiceRequestAdmin = () =>{\n    \n    return{\n        type: REJECT_SERVICE_PENDING_REQUEST_ADMIN,\n    };\n};\n\nconst rejectServiceSuccessAdmin = (rejectServiceAdminData) =>{\n    return{\n        type: REJECT_SERVICE_PENDING_SUCCESS_ADMIN,\n        payload: {\n            rejectServiceAdminData\n        }\n    };\n};\n\nconst rejectServiceFailureAdmin = (rejectServiceDataError) =>{\n   \n    return {\n        type: REJECT_SERVICE_PENDING_FAILED_ADMIN,\n        payload:rejectServiceDataError\n    };\n};\n\nexport const rejectServiceAdmin =  (reason_for_rejection,service_id) =>{\n   \n    return async function (dispatch) {\n\n        dispatch(rejectServiceRequestAdmin());\n    try{\n       const response = await axios({\n            method:\"post\",\n            url: URL_Admin+`/rejectPendingServices/${service_id}`,\n            headers:{\n                \"Content-type\":\"application/json\",\n                \"Accept\":\"application/json\",\n                Authorization:`Bearer ${localStorage.getItem(\"ADMIN-TOKEN\")}`\n            },\n            data:reason_for_rejection\n        });\n\n        const data = response.data;\n        if(response.data.message===\"You must be logged in as Admin\"){  \n            dispatch(signOutAdmin())\n        }\n        else{\n            // toast.success(data.message);\n        dispatch(rejectServiceSuccessAdmin(data));\n\n        }\n                        \n    }catch(rejectServiceDataError){\n     \n        dispatch(rejectServiceFailureAdmin(rejectServiceDataError));\n    }\n     \n    };\n};\n\n\n\n////////////ACCEPT PENDING REQUEST ////////////////////////\nconst accepteServiceRequestAdmin = () =>{\n    \n    return{\n        type: ACCCEPT_SERVICE_REQUEST_ADMIN,\n    };\n};\n\nconst accepteServiceSuccessAdmin = (acceptedServiceAdminData) =>{\n    return{\n        type: ACCCEPT_SERVICE_SUCCESS_ADMIN,\n        payload: {\n            acceptedServiceAdminData\n        }\n    };\n};\n\nconst accepteServiceFailureAdmin = (acceptedServiceDataError) =>{\n   \n    return {\n        type: ACCCEPT_SERVICE_FAILED_ADMIN,\n        payload:acceptedServiceDataError\n    };\n};\n\nexport const acceptServiceAdmin =  (service_id) =>{\n  \n    return async function (dispatch) {\n\n        dispatch(accepteServiceRequestAdmin());\n    try{\n       const response = await axios({\n            method:\"put\",\n            url: URL_Admin+`/acceptService/${service_id}`,\n            headers:{\n                \"Content-type\":\"application/json\",\n                \"Accept\":\"application/json\",\n                Authorization:`Bearer ${localStorage.getItem(\"ADMIN-TOKEN\")}`\n            }\n        });\n\n        const data = response.data;\n        if(response.data.message===\"You must be logged in as Admin\"){  \n            dispatch(signOutAdmin())\n        }\n        else{\n            toast.success(data.message);\n        dispatch(accepteServiceSuccessAdmin(data));\n\n        }\n                        \n    }catch(acceptedServiceDataError){\n     \n        dispatch(accepteServiceFailureAdmin(acceptedServiceDataError));\n    }\n     \n    };\n};\n\n////////TOGGLE SCREENS/////////\n\nexport const pendingScreen = () =>\n{\n    return  {\n        type:PENDING\n    }\n}\nexport const rejectedScreen = () =>\n{\n    return  {\n        type:REJECTED\n    }\n}\n\nexport const acceptedScreen = () =>\n{\n    return  {\n        type:ACCEPTED\n    }\n}\n\n// GET ALL REJECTED SERVICES///\n\nconst fetchAllRejectedServicesRequest = () =>{\n    return{\n        type: GET_ALL_SERVICES_REJECTED_REQUEST_ADMIN,\n        payload: {\n            loading: true\n          }\n    };\n};\n\nconst fetchAllRejectedServicesSuccess = (rejectedServiceData) =>{\n    \n    return{\n        type: GET_ALL_SERVICES_REJECTED_SUCCESS_ADMIN,\n        payload: {\n            rejectedServiceData\n        }\n    };\n};\n\nconst fetchAllRejectedServicesFailure = (errorRejected) =>{\n    return {\n        type: GET_ALL_SERVICES_REJECTED_FAILURE_ADMIN,\n        payload:errorRejected\n    };\n};\n\nexport const fetchRejectedServices = (payload) =>{\n    \n    return async function (dispatch) {\n        dispatch(fetchAllRejectedServicesRequest());\n        try{\n            const res = await axios({\n                    method:\"get\",\n                    url: URL_Admin+'/getAllServiceRejected',\n                    data: payload,\n                    headers:{\n                     Authorization:`Bearer ${localStorage.getItem(\"ADMIN-TOKEN\")}`\n                     }\n                });\n               if(res.data.message===\"You must be logged in as Admin\"){\n                   dispatch(signOutAdmin())\n               }\n               else{\n                const result = res.data.data; \n                dispatch(fetchAllRejectedServicesSuccess(result));\n               }\n                \n        }catch(errorRejected){\n           \n                dispatch(fetchAllRejectedServicesFailure(errorRejected.response.data));\n\n        }\n    };\n};\n\n\n// GET ALL ACCEPTED SERVICES///\nconst fetchAllAcceptedServicesRequest = () =>{\n    return{\n        type: GET_ALL_SERVICES_ACCEPTED_REQUEST_ADMIN,\n        payload: {\n            loading: true\n          }\n    };\n};\n\nconst fetchAllAcceptedServicesSuccess = (acceptedServiceData) =>{\n    \n    return{\n        type: GET_ALL_SERVICES_ACCEPTED_SUCCESS_ADMIN,\n        payload: {\n            acceptedServiceData\n        }\n    };\n};\n\nconst fetchAllAcceptedServicesFailure = (errorAccepted) =>{\n   \n    return {\n        type: GET_ALL_SERVICES_ACCEPTED_FAILURE_ADMIN,\n        payload:errorAccepted\n    };\n};\n\nexport const fetchAcceptedServices = (payload) =>{\n    \n    return async function (dispatch) {\n        dispatch(fetchAllAcceptedServicesRequest());\n        try{\n            const res = await axios({\n                    method:\"get\",\n                    url: URL_Admin+'/getAllServiceAccepted',\n                    data: payload,\n                    headers:{\n                     Authorization:`Bearer ${localStorage.getItem(\"ADMIN-TOKEN\")}`\n                     }\n                });\n               if(res.data.message===\"You must be logged in as Admin\"){\n                   dispatch(signOutAdmin())\n               }\n               else{\n                const result = res.data.data; \n                dispatch(fetchAllAcceptedServicesSuccess(result));\n               }\n                \n        }catch(errorAccepted){\n          \n                dispatch(fetchAllAcceptedServicesFailure(errorAccepted.response.data));\n              \n        }\n    };\n};\n\n\n//// GET ALL PENDING SERVICES/////\n\nconst fetchAllPendingServicesRequest = () =>{\n    return{\n        type: GET_ALL_SERVICES_PENDING_REQUEST_ADMIN,\n        payload: {\n            loading: true\n          }\n    };\n};\n\nconst fetchAllPendingServicesSuccess = (pendingServiceData) =>{\n    \n    return{\n        type: GET_ALL_SERVICES_PENDING_SUCCESS_ADMIN,\n        payload: {\n            pendingServiceData\n        }\n    };\n};\n\nconst fetchAllPendingServicesFailure = (errorPending) =>{\n    return {\n        type: GET_ALL_SERVICES_PENDING_FAILURE_ADMIN,\n        payload:errorPending\n    };\n};\n\nexport const fetchPendingServices = (payload) =>{\n       \n    return async function (dispatch) {\n        dispatch(fetchAllPendingServicesRequest());\n        try{\n            const res = await axios({\n                    method:\"get\",\n                    url: URL_Admin+'/getAllServicePending',\n                    data: payload,\n                    headers:{\n                     Authorization:`Bearer ${localStorage.getItem(\"ADMIN-TOKEN\")}`\n                     }\n                });\n               if(res.data.message===\"You must be logged in as Admin\"){\n                   dispatch(signOutAdmin())\n               }\n               else{\n                   \n                const result = res.data.data; \n                dispatch(fetchAllPendingServicesSuccess(result));\n                // dispatch(fetchAllAcceptedServicesFailure(\"\")); \n               }\n                \n        }catch(errorPending){\n           \n                dispatch(fetchAllPendingServicesFailure(errorPending.response.data));\n                \n        }\n    };\n};\n\n// SIGN UP ADMIN\n\nconst signUpRequestAdmin = () =>{\n    return{\n        type: SIGN_UP_ADMIN_REQUEST,\n    };\n};\n\nconst signUpSuccessAdmin = (user) =>{\n    return{\n        type: SIGN_UP_ADMIN_SUCCESS,\n        payload: {\n            user\n        }\n    };\n};\n\nconst signUpFailureAdmin = (error) =>{\n    return {\n        type: SIGN_UP_ADMIN_FAILURE,\n        payload:error\n    };\n};\n\nexport const signUpAdmin = (user,history) =>{\n    \n    return async function (dispatch)  {\n        dispatch(signUpRequestAdmin());\n        try{\n            const res = await axios({\n                method:\"post\",\n                url: URL_Admin+'/register',\n                data: user,\n                });\n                const {data} = res.data;\n               \n                dispatch(signUpSuccessAdmin(data));\n                history.push('/adminhome');\n        }catch(error){\n          \n               dispatch(signUpFailureAdmin(error));\n           \n        }\n    };\n};\n\n//Sign in  ADMIN\n\nconst signInRequestAdmin = () =>{\n    return {\n        type: SIGN_IN_ADMIN_REQUEST\n    };\n};\n\nconst signInSuccessAdmin = (payload) =>{\n    return {\n        type: SIGN_IN_ADMIN_SUCCESS,\n        payload\n    };\n};\n\nconst signInFailureAdmin = (error) =>{\n \n    return {\n        type: SIGN_IN_ADMIN_FAILURE,\n        payload: error,\n    };\n};\n\nexport const signinAdmin = (payload,history) =>{\n\n    return async function (dispatch) {\n    \n        dispatch(signInRequestAdmin);\n        try{\n    \n           const res= await axios({\n                method:\"POST\",\n                url: URL_Admin+\"/login\",\n                data:payload,\n                headers:{\n                    \"Content-type\":\"application/json\",\n                    \"Accept\":\"application/json\",\n                }\n            })           \n              \n            const {access_token,name} = res.data;\n\n            localStorage.setItem(\"ADMIN-NAME\",name);\n                localStorage.setItem(\"ADMIN-TOKEN\",access_token);\n                dispatch(signInSuccessAdmin({access_token,name}));\n        }catch(error){\n            if(error.response && error.response.status === 404){\n                dispatch(signInFailureAdmin(error.response.data));\n            \n           }\n           else{\n               dispatch(signUpFailureAdmin(error));\n           }\n           \n           \n        }\n        \n    };\n};\n\n// sign out ADMIN\n\nexport const signOutRequestAdmin = () =>{\n    return {\n        type: SIGN_OUT_ADMIN_REQUEST,\n    };\n};\n\nexport const signOutSuccessAdmin = () =>{\n    return {\n      type: SIGN_OUT_ADMIN_SUCCESS,\n    };\n  };\n\nexport const signOutFailureAdmin = () =>{\n    return {\n        type: SIGN_OUT_ADMIN_FAILURE\n    };\n};\n\nexport const signOutAdmin = (history) =>{\n\n    return async function(dispatch){\n        dispatch(signOutRequestAdmin());\n        try{\n        \n\n            const res= await axios({\n                 method:\"POST\",\n                 url: URL_Admin+\"/logout\",\n                 headers:{\n                     \"Content-type\":\"application/json\",\n                     \"Accept\":\"application/json\",\n                     \"Authorization\":`Bearer ${localStorage.getItem(\"ADMIN-TOKEN\")}`\n                 }\n             }) \n        localStorage.removeItem(\"ADMIN-TOKEN\");\n        localStorage.removeItem(\"ADMIN-NAME\");\n      history.push('/admin/signin');\n        toast.success(\"Logged out\");\n            }\n            catch(error){\n               \n\n                if(localStorage.getItem(\"ADMIN-TOKEN\")!== null){\n                    dispatch(signOutFailureAdmin());\n                }\n                else{\n                    dispatch(signOutSuccessAdmin());\n                }\n            }\n       \n    };\n}\n/////////////////////////USER///////////////////////////////////////////////////////////////////////////////////\n\n//////////////GET ALL MY SERVICE REJECTED///////////\n\nconst fetchAllMyRejectedServiceUserRequest = () =>{\n    return{\n        type: GET_MY_SERVICE_REJECTED_REQUEST_USER,\n        payload: {\n            loading: true\n          }\n    };\n};\n\nconst fetchAllMyRejectedServiceUserSuccess = (myServiceRejectedData) =>{\n    \n    return{\n        type: GET_MY_SERVICE_REJECTED_SUCCESS_USER,\n        payload: {\n            myServiceRejectedData\n        }\n    };\n};\n\nconst fetchAllMyRejectedServiceUserFailure = (errorMyServiceRejected) =>{\n  \n    return {\n        type: GET_MY_SERVICE_REJECTED_FAILED_USER,\n        payload:errorMyServiceRejected\n    };\n};\n\nexport const fetchAllMyRejectedServiceUser = () =>{\n   \n    return async function (dispatch) {\n    \n        dispatch(fetchAllMyRejectedServiceUserRequest());\n        try{\n            const res = await axios({\n                    method:\"get\",\n                    url: URL_User+'/getServiceRejected',\n                    headers:{\n                        \"Accept\":\"application/json\",\n                        Authorization:`Bearer ${localStorage.getItem(\"USER-TOKEN\")}`\n                    }\n                                   \n                });                \n                const result = res.data;   \n                 \n                if(res.data.message===\"You must be logged in\"){  \n                    dispatch(signOutUser())\n                }\n                else{\n                       \n                    dispatch(fetchAllMyRejectedServiceUserSuccess(result));\n              \n                }\n              \n               \n                       \n               \n        }catch(errorMyServiceAccepted){\n     \n          \n                dispatch(fetchAllMyRejectedServiceUserFailure(errorMyServiceAccepted.response.data));\n                \n        }\n    };\n};\n\n//////////////GET ALL MY SERVICE ACCEPTED///////////\n\nconst fetchAllMyAcceptedServiceUserRequest = () =>{\n    return{\n        type: GET_MY_SERVICE_ACCEPTED_REQUEST_USER,\n        payload: {\n            loading: true\n          }\n    };\n};\n\nconst fetchAllMyAcceptedServiceUserSuccess = (myServiceAcceptedData) =>{\n    \n    return{\n        type: GET_MY_SERVICE_ACCEPTED_SUCCESS_USER,\n        payload: {\n            myServiceAcceptedData\n        }\n    };\n};\n\nconst fetchAllMyAcceptedServiceUserFailure = (errorMyServiceAccepted) =>{\n  \n    return {\n        type: GET_MY_SERVICE_ACCEPTED_FAILED_USER,\n        payload:errorMyServiceAccepted\n    };\n};\n\nexport const fetchAllMyAcceptedServiceUser = () =>{\n   \n    return async function (dispatch) {\n        console.log('ehehehhe')   \n        dispatch(fetchAllMyAcceptedServiceUserRequest());\n        try{\n            const res = await axios({\n                    method:\"get\",\n                    url: URL_User+'/getServiceAccepted',\n                    headers:{\n                        \"Accept\":\"application/json\",\n                        Authorization:`Bearer ${localStorage.getItem(\"USER-TOKEN\")}`\n                    }\n                                   \n                });                \n                const result = res.data;   \n                 \n                if(res.data.message===\"You must be logged in\"){  \n                    dispatch(signOutUser())\n                }\n                else{\n                       \n                    dispatch(fetchAllMyAcceptedServiceUserSuccess(result));\n              \n                }\n              \n               \n                       \n               \n        }catch(errorMyServiceAccepted){\n     \n          \n                dispatch(fetchAllMyAcceptedServiceUserFailure(errorMyServiceAccepted.response.data));\n                \n        }\n    };\n};\n\n///////////////GET ALL MY SERVICE PENDING///////////\n\nconst fetchAllMyPendingServiceUserRequest = () =>{\n    return{\n        type: GET_MY_SERVICE_PENDING_REQUEST_USER,\n        payload: {\n            loading: true\n          }\n    };\n};\n\nconst fetchAllMyPendingServiceUserSuccess = (myServicePendingData) =>{\n    \n    return{\n        type: GET_MY_SERVICE_PENDING_SUCCESS_USER,\n        payload: {\n            myServicePendingData\n        }\n    };\n};\n\nconst fetchAllMyPendingServiceUserFailure = (errorMyServicePending) =>{\n  \n    return {\n        type: GET_MY_SERVICE_PENDING_FAILED_USER,\n        payload:errorMyServicePending\n    };\n};\n\nexport const fetchAllMyPendingServiceUser = () =>{\n   \n    return async function (dispatch) {\n        console.log('ehehehhe')   \n        dispatch(fetchAllMyPendingServiceUserRequest());\n        try{\n            const res = await axios({\n                    method:\"get\",\n                    url: URL_User+'/getServicePending',\n                    headers:{\n                        \"Accept\":\"application/json\",\n                        Authorization:`Bearer ${localStorage.getItem(\"USER-TOKEN\")}`\n                    }\n                                   \n                });                \n                const result = res.data;   \n                 \n                if(res.data.message===\"You must be logged in\"){  \n                    dispatch(signOutUser())\n                }\n                else{\n                       \n                    dispatch(fetchAllMyPendingServiceUserSuccess(result));\n              \n                }\n              \n               \n                       \n               \n        }catch(errorMyServicePending){\n     \n          \n                dispatch(fetchAllMyPendingServiceUserFailure(errorMyServicePending.response.data));\n                \n        }\n    };\n};\n\n\n////////////POST COMMENT ////////////////////////\nconst postCommentRequestUser = () =>{\n    \n    return{\n        type: POST_COMMENT_REQUEST_USER,\n    };\n};\n\nconst postCommentSuccessUser = (commentData) =>{\n    return{\n        type: POST_COMMENT_SUCCESS_USER,\n        payload: {\n            commentData\n        }\n    };\n};\n\nconst postCommentFailureUser = (ErrorComment) =>{\n   \n    return {\n        type: POST_COMMENT_FAILED_USER,\n        payload:ErrorComment\n    };\n};\n\nexport const postCommentUser =  (comment_data) =>{\n  \n    return async function (dispatch) {\n\n        dispatch(postCommentRequestUser());\n    try{\n       const response = await axios({\n            method:\"post\",\n            url: URL_User+`/createComment`,\n            data:comment_data,\n            headers:{\n                \"Content-type\":\"application/json\",\n                \"Accept\":\"application/json\",\n                Authorization:`Bearer ${localStorage.getItem(\"USER-TOKEN\")}`\n            }\n        });\n\n        const data = response.data;\n        if(response.data.message===\"You must be logged\"){  \n            dispatch(signOutUser())\n        }\n        else{\n            \n        dispatch(postCommentSuccessUser(data));\n\n        }\n                        \n    }catch(ErrorComment){\n     \n        dispatch(postCommentFailureUser(ErrorComment.response.data));\n    }\n     \n    };\n};\n\n\n////////////POST REJECT ORDER ////////////////////////\nconst rejectOrderRequestUser = () =>{\n    \n    return{\n        type: POST_REJECT_ORDER_REQUEST_USER,\n    };\n};\n\nconst rejectOrderSuccessUser = (rejectOrderData) =>{\n    return{\n        type: POST_REJECT_ORDER_SUCCESS_USER,\n        payload: {\n            rejectOrderData\n        }\n    };\n};\n\nconst rejectOrderFailureUser = (ErrorRejectOrder) =>{\n   \n    return {\n        type: POST_REJECT_ORDER_FAILED_USER,\n        payload:ErrorRejectOrder\n    };\n};\n\nexport const rejectOrderUser =  (rejectOrder_id) =>{\n  \n    return async function (dispatch) {\n\n        dispatch(rejectOrderRequestUser());\n    try{\n       const response = await axios({\n            method:\"put\",\n            url: URL_User+`/rejectOrder/${rejectOrder_id}`,\n            headers:{\n                \"Content-type\":\"application/json\",\n                \"Accept\":\"application/json\",\n                Authorization:`Bearer ${localStorage.getItem(\"USER-TOKEN\")}`\n            }\n        });\n\n        const data = response.data;\n        if(response.data.message===\"You must be logged\"){  \n            dispatch(signOutUser())\n        }\n        else{\n            toast.success('Order Rejected');\n        dispatch(rejectOrderSuccessUser(data));\n\n        }\n                        \n    }catch(ErrorRejectOrder){\n     \n        dispatch(rejectOrderFailureUser(ErrorRejectOrder));\n    }\n     \n    };\n};\n\n////////////POST ACCEPT ORDER ////////////////////////\nconst acceptOrderRequestUser = () =>{\n    \n    return{\n        type: POST_ACCEPT_ORDER_REQUEST_USER,\n    };\n};\n\nconst acceptOrderSuccessUser = (acceptOrderData) =>{\n    return{\n        type: POST_ACCEPT_ORDER_SUCCESS_USER,\n        payload: {\n            acceptOrderData\n        }\n    };\n};\n\nconst acceptOrderFailureUser = (ErroracceptOrder) =>{\n   \n    return {\n        type: POST_ACCEPT_ORDER_FAILED_USER,\n        payload:ErroracceptOrder\n    };\n};\n\nexport const acceptOrderUser =  (acceptOrderData) =>{\n  \n    return async function (dispatch) {\n\n        dispatch(acceptOrderRequestUser());\n    try{\n       const response = await axios({\n            method:\"put\",\n            url: URL_User+`/acceptOrder`,\n            data:acceptOrderData,\n            headers:{\n                \"Content-type\":\"application/json\",\n                \"Accept\":\"application/json\",\n                Authorization:`Bearer ${localStorage.getItem(\"USER-TOKEN\")}`\n            }\n        });\n\n        const data = response.data;\n        if(response.data.message===\"You must be logged\"){  \n            dispatch(signOutUser())\n        }\n        else{\n            toast.success('Order Accepted');\n        dispatch(acceptOrderSuccessUser(data));\n        // dispatch(fetchAllRecievedPendingOrderUser())\n\n        }\n                        \n    }catch(ErroracceptOrder){\n     \n        dispatch(acceptOrderFailureUser(ErroracceptOrder));\n    }\n     \n    };\n};\n\n\n//////////////GET ALL RECEIVED REJECTED ORDER /////////////\n\nconst fetchAllRecievedRejectedOrderUserRequest = () =>{\n    return{\n        type: GET_RECEIVED_ORDER_REJECTED_REQUEST_USER,\n        payload: {\n            loading: true\n          }\n    };\n};\n\nconst fetchAllRecievedRejectedOrderUserSuccess = (receivedRejectedOrderData) =>{\n    \n    return{\n        type: GET_RECEIVED_ORDER_REJECTED_SUCCESS_USER,\n        payload: {\n            receivedRejectedOrderData\n        }\n    };\n};\n\nconst fetchAllRecievedRejectedOrderUserFailure = (errorRecievedRejectedOrder) =>{\n\n \n    return {\n        type: GET_RECEIVED_ORDER_REJECTED_FAILED_USER,\n        payload:errorRecievedRejectedOrder\n    };\n};\n\nexport const fetchAllRecievedRejectedOrderUser = () =>{\n       \n    return async function (dispatch) {\n        dispatch(fetchAllRecievedRejectedOrderUserRequest());\n        try{\n            const res = await axios({\n                    method:\"get\",\n                    url: URL_User+'/getAllRejectedOrder',\n                    headers:{\n                        \"Accept\":\"application/json\",\n                        Authorization:`Bearer ${localStorage.getItem(\"USER-TOKEN\")}`\n                    }\n                                   \n                });                \n                const result = res.data;    \n                let payload=[]\n              \n            \n                result.data.map((res)=>{\n                   \n                    if(res.orders_rejected.length>0){\n                      \n                        res.orders_rejected.map((result2)=>  {\n                            payload=[...payload,{...result2,\n                                service:res,\n                            }]\n                     \n                    });\n                }});\n               \n               \n              \n\n                if(res.data.message===\"You must be logged in\"){  \n                    dispatch(signOutUser())\n                }\n                else{\n                       \n                    dispatch(fetchAllRecievedRejectedOrderUserSuccess(payload));\n              \n                }\n              \n               \n                       \n                \n        }catch(errorRecievedRejectedOrder){\n                  \n                dispatch(fetchAllRecievedRejectedOrderUserFailure(errorRecievedRejectedOrder.response.data));\n                \n        }\n    };\n};\n\n//////////////GET ALL RECEIVED ACCEPTED ORDER /////////////\n\nconst fetchAllRecievedAcceptedOrderUserRequest = () =>{\n    return{\n        type: GET_RECEIVED_ORDER_ACCEPTED_REQUEST_USER,\n        payload: {\n            loading: true\n          }\n    };\n};\n\nconst fetchAllRecievedAcceptedOrderUserSuccess = (receivedAcceptedOrderData) =>{\n    \n    return{\n        type: GET_RECEIVED_ORDER_ACCEPTED_SUCCESS_USER,\n        payload: {\n            receivedAcceptedOrderData\n        }\n    };\n};\n\nconst fetchAllRecievedAcceptedOrderUserFailure = (errorRecievedAcceptedOrder) =>{\n    return {\n        type: GET_RECEIVED_ORDER_ACCEPTED_FAILED_USER,\n        payload:errorRecievedAcceptedOrder\n    };\n};\n\nexport const fetchAllRecievedAcceptedOrderUser = () =>{\n       \n    return async function (dispatch) {\n        dispatch(fetchAllRecievedAcceptedOrderUserRequest());\n        try{\n            const res = await axios({\n                    method:\"get\",\n                    url: URL_User+'/getAllAcceptedOrder',\n                    headers:{\n                        \"Accept\":\"application/json\",\n                        Authorization:`Bearer ${localStorage.getItem(\"USER-TOKEN\")}`\n                    }\n                                   \n                });                \n                const result = res.data;    \n                let payload=[]\n\n            \n                result.data.map((res)=>{\n                   \n                    if(res.orders_accepted.length>0){\n                      \n                        res.orders_accepted.map((result2)=>  {\n                            payload=[...payload,{...result2,\n                                service:res,\n                            }]\n                     \n                    });\n                }});\n            \n               \n              \n\n                if(res.data.message===\"You must be logged in\"){  \n                    dispatch(signOutUser())\n                }\n                else{\n                       \n                    dispatch(fetchAllRecievedAcceptedOrderUserSuccess(payload));\n              \n                }\n              \n               \n                       \n                \n        }catch(errorRecievedAcceptedOrder){\n           \n                dispatch(fetchAllRecievedAcceptedOrderUserFailure(errorRecievedAcceptedOrder.response.data));\n                \n        }\n    };\n};\n\n//////////////GET ALL RECEIVED  PENDING ORDER /////////////\n\nconst fetchAllRecievedPendingOrderUserRequest = () =>{\n    return{\n        type: GET_RECEIVED_ORDER_PENDING_REQUEST_USER,\n        payload: {\n            loading: true\n          }\n    };\n};\n\nconst fetchAllRecievedPendingOrderUserSuccess = (receivedPendingOrderData) =>{\n    \n    return{\n        type: GET_RECEIVED_ORDER_PENDING_SUCCESS_USER,\n        payload: {\n            receivedPendingOrderData\n        }\n    };\n};\n\nconst fetchAllRecievedPendingOrderUserFailure = (errorRecievedPendingOrder) =>{\n    return {\n        type: GET_RECEIVED_ORDER_PENDING_FAILED_USER,\n        payload:errorRecievedPendingOrder\n    };\n};\n\nexport const fetchAllRecievedPendingOrderUser = () =>{\n       \n    return async function (dispatch) {\n        dispatch(fetchAllRecievedPendingOrderUserRequest());\n        try{\n            const res = await axios({\n                    method:\"get\",\n                    url: URL_User+'/getAllPendingOrder',\n                    headers:{\n                        \"Accept\":\"application/json\",\n                        Authorization:`Bearer ${localStorage.getItem(\"USER-TOKEN\")}`\n                    }\n                                   \n                });                \n                const result = res.data;    \n                let payload=[]\n\n            \n                result.data.map((res)=>{\n                   \n                    if(res.orders_pending.length>0){\n                      \n                        res.orders_pending.map((result2)=>  {\n                            payload=[...payload,{...result2,\n                                service:res,\n                            }]\n                     \n                    });\n                }});\n\n               \n              \n\n                if(res.data.message===\"You must be logged in\"){  \n                    dispatch(signOutUser())\n                }\n                else{\n                       \n                    dispatch(fetchAllRecievedPendingOrderUserSuccess(payload));\n              \n                }\n              \n               \n                       \n                \n        }catch(errorRecievedPendingOrder){\n           \n                dispatch(fetchAllRecievedPendingOrderUserFailure(errorRecievedPendingOrder.response.data));\n                \n        }\n    };\n};\n\n///////////////GET ALL MY REJECTED ORDER /////////\n\nconst fetchAllMyRejectedOrderUserRequest = () =>{\n    return{\n        type: GET_MY_ORDER_REJECTED_REQUEST_USER,\n        payload: {\n            loading: true\n          }\n    };\n};\n\nconst fetchAllMyRejectedOrderUserSucces = (myRejectedOrderData) =>{\n    \n    return{\n        type: GET_MY_ORDER_REJECTED_SUCCESS_USER,\n        payload: {\n            myRejectedOrderData\n        }\n    };\n};\n\nconst fetchAllMyRejectedOrderUserFailure = (errorMyRejectedOrder) =>{\n    return {\n        type: GET_MY_ORDER_REJECTED_FAILED_USER,\n        payload:errorMyRejectedOrder\n    };\n};\n\nexport const fetchAllMyRejectedOrderUser = () =>{\n       \n    return async function (dispatch) {\n        dispatch(fetchAllMyRejectedOrderUserRequest());\n        try{\n            const res = await axios({\n                    method:\"get\",\n                    url: URL_User+'/myOrdersRejected',\n                    headers:{\n                        \"Accept\":\"application/json\",\n                        Authorization:`Bearer ${localStorage.getItem(\"USER-TOKEN\")}`\n                    }\n                                   \n                });                \n                const result = res.data;         \n                if(res.data.message===\"You must be logged in\"){  \n                    dispatch(signOutUser())\n                }\n                else{\n                       \n                    dispatch(fetchAllMyRejectedOrderUserSucces(result));\n              \n                }\n              \n               \n                       \n                \n        }catch(errorMyRejectedOrder){\n           \n                dispatch(fetchAllMyRejectedOrderUserFailure(errorMyRejectedOrder.response.data));\n                \n        }\n    };\n};\n\n\n///////////////GET ALL MY ACCEPTED ORDER ////////////////////\n\nconst fetchAllMyAcceptedOrderUserRequest = () =>{\n    return{\n        type: GET_MY_ORDER_ACCEPTED_REQUEST_USER,\n        payload: {\n            loading: true\n          }\n    };\n};\n\nconst fetchAllMyAcceptedOrderUserSucces = (myAcceptedOrderData) =>{\n    \n    return{\n        type: GET_MY_ORDER_ACCEPTED_SUCCESS_USER,\n        payload: {\n            myAcceptedOrderData\n        }\n    };\n};\n\nconst fetchAllMyAcceptedOrderUserFailure = (errorMyAcceptedOrder) =>{\n    return {\n        type: GET_MY_ORDER_ACCEPTED_FAILED_USER,\n        payload:errorMyAcceptedOrder\n    };\n};\n\nexport const fetchAllMyAcceptedOrderUser = () =>{\n       \n    return async function (dispatch) {\n        dispatch(fetchAllMyAcceptedOrderUserRequest());\n        try{\n            const res = await axios({\n                    method:\"get\",\n                    url: URL_User+'/myOrdersAccepted',\n                    headers:{\n                        \"Accept\":\"application/json\",\n                        Authorization:`Bearer ${localStorage.getItem(\"USER-TOKEN\")}`\n                    }\n                                   \n                });                \n                const result = res.data;         \n                if(res.data.message===\"You must be logged in\"){  \n                    dispatch(signOutUser())\n                }\n                else{\n                       \n                    dispatch(fetchAllMyAcceptedOrderUserSucces(result));\n              \n                }\n              \n               \n                       \n                \n        }catch(errorMyAcceptedOrder){\n           \n                dispatch(fetchAllMyAcceptedOrderUserFailure(errorMyAcceptedOrder.response.data));\n                \n        }\n    };\n};\n\n///////////////GET ALL MY PENDING ORDER /////////\n\nconst fetchAllMyPendingOrderUserRequest = () =>{\n    return{\n        type: GET_MY_ORDER_PENDING_REQUEST_USER,\n        payload: {\n            loading: true\n          }\n    };\n};\n\nconst fetchAllMyPendingOrderUserSucces = (myPendingOrderData) =>{\n    \n    return{\n        type: GET_MY_ORDER_PENDING_SUCCESS_USER,\n        payload: {\n            myPendingOrderData\n        }\n    };\n};\n\nconst fetchAllMyPendingOrderUserFailure = (errorMyPendingOrder) =>{\n    return {\n        type: GET_MY_ORDER_PENDING_FAILED_USER,\n        payload:errorMyPendingOrder\n    };\n};\n\nexport const fetchAllMyPendingOrderUser = () =>{\n       \n    return async function (dispatch) {\n        dispatch(fetchAllMyPendingOrderUserRequest());\n        try{\n            const res = await axios({\n                    method:\"get\",\n                    url: URL_User+'/myOrdersPending',\n                    headers:{\n                        \"Accept\":\"application/json\",\n                        Authorization:`Bearer ${localStorage.getItem(\"USER-TOKEN\")}`\n                    }\n                                   \n                });                \n                const result = res.data;         \n                if(res.data.message===\"You must be logged in\"){  \n                    dispatch(signOutUser())\n                }\n                else{\n                       \n                    dispatch(fetchAllMyPendingOrderUserSucces(result));\n              \n                }\n              \n               \n                       \n                \n        }catch(errorMyPendingOrder){\n           \n                dispatch(fetchAllMyPendingOrderUserFailure(errorMyPendingOrder.response.data));\n                \n        }\n    };\n};\n\n////////////POST ORDER /////////\nconst postOrderUserRequest = () =>{\n   \n    return{\n        type: POST_ORDER_REQUEST_USER,\n    };\n};\n\nconst postOrderUserSuccess = (postOrderData) =>{\n   \n    return{\n        type: POST_ORDER_SUCCESS_USER,\n        payload: {\n            postOrderData\n        }\n    };\n};\n\nconst postOrderUserFailure = (postOrderError) =>{\n   \n    return {\n        type: POST_ORDER_FAILED_USER,\n        payload:postOrderError\n    };\n};\n\nexport const postOrder =  (OrderData) =>{\n \n    return async function (dispatch) {\n\n        dispatch(postOrderUserRequest());\n    try{\n       const response = await axios.post(URL_User+`/createOrder`,OrderData,\n           {\n            headers:{\n                \"Accept\":\"application/json\",\n                Authorization:`Bearer ${localStorage.getItem(\"USER-TOKEN\")}`\n            }\n        }\n           \n        );\n        const datas = response.data;\n       \n        if(response && response.data && response.data.message && response.data.message===\"You must be logged in\"){  \n            dispatch(signOutUser())\n        }\n        else{\n               \n        dispatch(postOrderUserSuccess(datas));\n        toast.success('Your Order Has Been Sent Check your messages with your provider');\n        }\n                        \n    }catch(postOrderError){\n  \n        dispatch(postOrderUserFailure(postOrderError.response.data));\n    }\n     \n    };\n};\n\n\n///////CREATE SERVICE\n\nconst createServiceRequest = () =>{\n   \n    return{\n        type: POST_CREATE_SERVICE_REQUEST_USER,\n    };\n};\n\nconst createServiceSuccess = (postService) =>{\n    return{\n        type: POST_CREATE_SERVICE_SUCCESS_USER,\n        payload: {\n            postService\n        }\n    };\n};\n\nconst createServiceFailure = (createServiceError) =>{\n   \n    return {\n        type: POST_CREATE_SERVICE_FAILED_USER,\n        payload:createServiceError\n    };\n};\n\nexport const createService =  (postService) =>{\n \n    return async function (dispatch) {\n\n        dispatch(createServiceRequest());\n    try{\n       const response = await axios.post(URL_User+`/services`,postService,\n           {\n            headers:{\n                \"Accept\":\"application/json\",\n                Authorization:`Bearer ${localStorage.getItem(\"USER-TOKEN\")}`\n            }\n        }\n           \n        );\n        const data = response.data;\n    \n        if(response.data.message===\"You must be logged in\"){  \n            dispatch(signOutUser())\n        }\n        else{\n               \n        dispatch(createServiceSuccess(data));\n        toast.success(data.message)\n        }\n                        \n    }catch(createServiceError){\n       \n        dispatch(createServiceFailure(createServiceError.response.data));\n    }\n     \n    };\n};\n\n//// FETCH SUBCATEGORY BY CATEGORY_ID //////////////\n\nexport const  emptySubcategory = ()=>{\n    return {\n        type:EMPTY_SUBCATEGORY,\n    }\n}\n\nconst fectchSubcategoryByCategoryIDRequest = () =>{\n\n    return{\n        type: GET_SUBCATEGORY_BY_CATEGORY_ID_REQUEST_USER,\n    };\n};\n\nconst fectchSubcategoryByCategoryIDSuccess = (fetchSubCategoryDataUser) =>{\n    return{\n        type: GET_SUBCATEGORY_BY_CATEGORY_ID_SUCCESS_USER,\n        payload: {\n            fetchSubCategoryDataUser\n        }\n    };\n};\n\nconst fectchSubcategoryByCategoryIDFailure = (fetchSubCategoryDataUsererror) =>{\n   \n    return {\n        type: GET_SUBCATEGORY_BY_CATEGORY_ID_FAILED_USER,\n        payload:fetchSubCategoryDataUsererror\n    };\n};\n\nexport const fetchSubcategoryByCategoryID =  (category_id) =>{\n  \n    return async function (dispatch) {\n\n        dispatch(fectchSubcategoryByCategoryIDRequest());\n    try{\n       const response = await axios({\n            method:\"get\",\n            url: URL_User+`/getSubcategoryByCategoryId/${category_id}`,\n            headers:{\n                \"Content-type\":\"application/json\",\n                \"Accept\":\"application/json\",\n                Authorization:`Bearer ${localStorage.getItem(\"USER-TOKEN\")}`\n            }\n        });\n\n        const data = response.data;\n        if(response.data.message===\"You must be logged in\"){  \n            dispatch(signOutUser())\n        }\n        else{\n               \n        dispatch(fectchSubcategoryByCategoryIDSuccess(data));\n        }\n                        \n    }catch(fetchSubCategoryDataUsererror){\n     \n        dispatch(fectchSubcategoryByCategoryIDFailure(fetchSubCategoryDataUsererror));\n    }\n     \n    };\n};\n\n////// FETCH ALL CATEGORY //////\nconst fetchAllCategoryRequestUser = () =>{\n    return{\n        type: GET_ALL_CATEGORY_REQUEST_USER,\n        payload: {\n            loading: true\n          }\n    };\n};\n\nconst fetchAllCategorySuccessUser = (categoryUserDataUser) =>{\n    \n    return{\n        type: GET_ALL_CATEGORY_SUCCESS_USER,\n        payload: {\n            categoryUserDataUser\n        }\n    };\n};\n\nconst fetchAllCategoryFaillureUser = (errorCategoryUser) =>{\n   \n    return {\n        type: GET_ALL_CATEGORY_FAILED_USER,\n        payload:errorCategoryUser\n    };\n};\n\nexport const fetchAllCategoryUser = (payload) =>{\n    \n    return async function (dispatch) {\n        dispatch(fetchAllCategoryRequestUser());\n        try{\n            const res = await axios({\n                    method:\"get\",\n                    url: URL_User+'/getAllCategory',\n                    data: payload,\n                    headers:{\n                     Authorization:`Bearer ${localStorage.getItem(\"USER-TOKEN\")}`\n                     }\n                });\n              \n               if(res.data.message===\"You must be logged in\"){  \n                   dispatch(signOutUser())\n               }\n               else{\n                  \n                const result = res.data.category; \n            \n                dispatch(fetchAllCategorySuccessUser(result));\n               }\n                \n        }catch(errorCategoryUser){\n          \n                dispatch(fetchAllCategoryFaillureUser(errorCategoryUser.response.data));\n              \n        }\n    };\n};\n\n\n////// FETCH ALL ACCEPTED CATEGORY //////\nconst fetchAllAcceptedCategoryRequest = () =>{\n    return{\n        type: GET_ALL_CATEGORY_ACCEPTED_REQUEST_USER,\n        payload: {\n            loading: true\n          }\n    };\n};\n\nconst fetchAllAcceptedCategorySuccess = (acceptedCategoryUserDataUser) =>{\n \n    return{\n        type: GET_ALL_CATEGORY_ACCEPTED_SUCCESS_USER,\n        payload: {\n            acceptedCategoryUserDataUser\n        }\n    };\n};\n\nconst fetchAllAcceptedCategoryFaillure = (errorAcceptedCategoryUser) =>{\n   \n    return {\n        type: GET_ALL_CATEGORY_ACCEPTED_FAILED_USER,\n        payload:errorAcceptedCategoryUser\n    };\n};\n\nexport const fetchAcceptedCategoryUser = (payload) =>{\n    \n    return async function (dispatch) {\n        dispatch(fetchAllAcceptedCategoryRequest());\n        try{\n            const res = await axios({\n                    method:\"get\",\n                    url: URL_User+'/getAllAcceptedCategory',\n                    data: payload,\n                    headers:{\n                     Authorization:`Bearer ${localStorage.getItem(\"USER-TOKEN\")}`\n                     }\n                });\n            \n               if(res.data.message===\"You must be logged in\"){  \n                   dispatch(signOutUser())\n               }\n               else{\n                  \n                const result = res.data.data; \n                \n                dispatch(fetchAllAcceptedCategorySuccess(result));\n               }\n                \n        }catch(errorAcceptedCategoryUser){\n          \n                dispatch(fetchAllAcceptedCategoryFaillure(errorAcceptedCategoryUser.response.data));\n              \n        }\n    };\n};\n/////////////////FETCH ALL ROOMS////////////\n\nconst fetchAllRoomsRequestUser = () =>{\n    return{\n        type: GET_ROOMS_REQUEST_USER,\n        payload: {\n            loading: true\n          }\n    };\n};\n\nconst fetchAllRoomsSuccessUser = (roomsUserData) =>{\n    \n    return{\n        type: GET_ROOMS_SUCCESS_USER,\n        payload: {\n            roomsUserData\n        }\n    };\n};\n\nconst fetchAllRoomsFaillureUser = (errorRooms) =>{\n   \n    return {\n        type: GET_ROOMS_FAILED_USER,\n        payload:errorRooms\n    };\n};\n\nexport const fetchAllRoomsUser = (payload) =>{\n    \n    return async function (dispatch) {\n        dispatch(fetchAllRoomsRequestUser());\n        try{\n            const res = await axios({\n                    method:\"get\",\n                    url: URL_User+'/getAllRooms',\n                    data: payload,\n                    headers:{\n                     Authorization:`Bearer ${localStorage.getItem(\"USER-TOKEN\")}`\n                     }\n                });\n              \n               if(res.data.message===\"You must be logged in\"){  \n                   dispatch(signOutUser())\n               }\n               else{\n                  \n                const result = res.data; \n            \n                dispatch(fetchAllRoomsSuccessUser(result));\n               }\n                \n        }catch(errorRooms){\n          \n                dispatch(fetchAllRoomsFaillureUser(errorRooms.response.data));\n              \n        }\n    };\n};\n\n//// /////////////CONTACT  SELLER //////////////\n\n\nconst contactSellerRequest = () =>{\n   \n    return{\n        type: CONTACT_SELLER_REQUEST_USER,\n    };\n};\n\nconst contactSellerSuccess = (contactData) =>{\n    return{\n        type: CONTACT_SELLER_SUCCESS_USER,\n        payload: {\n            contactData\n        }\n    };\n};\n\nconst contactSellerFailure = (contactError) =>{\n   \n    return {\n        type: CONTACT_SELLER_FAILED_USER,\n        payload:contactError\n    };\n};\n\nexport const contactSeller =  (contactData) =>{\n \n    return async function (dispatch) {\n\n        dispatch(contactSellerRequest());\n    try{\n       const response = await axios.post(URL_User+`/contactSeller`,contactData,\n           {\n            headers:{\n                \"Accept\":\"application/json\",\n                Authorization:`Bearer ${localStorage.getItem(\"USER-TOKEN\")}`\n            }\n        }\n           \n        );\n        const data = response.data;\n       \n        if(response.data.message===\"You must be logged in\"){  \n            dispatch(signOutUser())\n        }\n        else{\n               \n        dispatch(contactSellerSuccess(data));\n        toast.success('Message Sent')\n        }\n                        \n    }catch(contactError){\n       \n        dispatch(contactSellerFailure(contactError.response.data));\n    }\n     \n    };\n};\n\n\n// SIGN UP USER\n\nconst signUpRequestUser = () =>{\n    return{\n        type: SIGN_UP_USER_REQUEST,\n    };\n};\n\nconst signUpSuccessUser = (user) =>{\n    return{\n        type: SIGN_UP_USER_SUCCESS,\n        payload: {\n            user\n        }\n    };\n};\n\nconst signUpFailureUser = (error) =>{\n\n    return {\n        type: SIGN_UP_USER_FAILURE,\n        payload:error.errors\n    };\n};\n\nexport const signUpUser = (user,history) =>{\n    \n    return async function (dispatch)  {\n        dispatch(signUpRequestUser());\n        try{\n            const res = await axios({\n                method:\"post\",\n                url: URL_User+'/register',\n                data: user,\n                });\n                const {data} = res.data;\n               \n                if(res.data.success ===false && res.status ===200 && res.data.errors){\n                    dispatch(signUpSuccessUser(res.data.erros));\n                    toast.success('Succefully Registered');\n               }\n               else{\n                   dispatch(signUpFailureUser(data));\n               }\n\n          \n        }catch(error){\n                   \n            if(error.response && error.response.status ===400){\n                dispatch(signUpFailureUser(error.response.data));\n            \n           }\n           else{\n               dispatch(signUpFailureUser(error));\n           }\n\n            \n             \n           \n        }\n    };\n};\n\n//Sign in  USER\n\nconst signInRequestUser = () =>{\n    return {\n        type: SIGN_IN_USER_REQUEST\n    };\n};\n\nconst signInSuccessUser = (payload) =>{\n    return {\n        type: SIGN_IN_USER_SUCCESS,\n        payload\n    };\n};\n\nconst signInFailureUser = (error) =>{\n \n    return {\n        type: SIGN_IN_USER_FAILURE,\n        payload: error,\n    };\n};\n\nexport const signinUser = (payload,history) =>{\n\n    return async function (dispatch) {\n    \n        dispatch(signInRequestUser);\n        try{\n    \n           const res= await axios({\n                method:\"POST\",\n                url: URL_User+\"/login\",\n                data:payload,\n                headers:{\n                    \"Content-type\":\"application/json\",\n                    \"Accept\":\"application/json\",\n                }\n            })           \n             \n            const {access_token,id, user_name:{name} } = res.data;\n\n              \n                localStorage.setItem(\"USER-TOKEN\",access_token);\n                // localStorage.setItem(\"USER-EMAIL\",email);\n                localStorage.setItem(\"USER-ID\",id);\n                localStorage.setItem(\"USER-NAME\",name);\n                dispatch(signInSuccessUser({access_token,id,name}));\n                toast.success('Succefully Logged in');\n        }catch(error){\n            if(error.response && error.response.status === 404){\n                dispatch(signInFailureUser(error.response.data));\n            \n           }\n           else{\n               dispatch(signUpFailureUser(error));\n           }\n           \n           \n        }\n        \n    };\n};\n\n// sign out USER\n\nexport const signOutRequestUser = () =>{\n    return {\n        type: SIGN_OUT_USER_REQUEST,\n    };\n};\n\nexport const signOutSuccessUser = () =>{\n    return {\n      type: SIGN_OUT_USER_SUCCESS,\n    };\n  };\n\nexport const signOutFailureUser = () =>{\n    return {\n        type: SIGN_OUT_USER_FAILURE\n    };\n};\n\nexport const signOutUser = () =>{\n    return async function(dispatch){\n        dispatch(signOutRequestUser());\n        try{\n    \n            const res= await axios({\n                 method:\"POST\",\n                 url: URL_User+\"/logout\",\n                 headers:{\n                     \"Content-type\":\"application/json\",\n                     \"Accept\":\"application/json\",\n                 }\n             }) \n        localStorage.removeItem(\"USER-TOKEN\");\n        // localStorage.removeItem(\"USER-EMAIL\");\n        localStorage.removeItem(\"USER-ID\");\n        localStorage.removeItem(\"USER-NAME\");\n        toast.success('Logged out');\n            }\n            catch(error){\n                if(localStorage.getItem(\"USER-TOKEN\")!== null){\n                    dispatch(signOutFailureUser());\n                }\n                else{\n                    dispatch(signOutSuccessUser());\n                }\n            }\n       \n    };\n}\n\n\n///////////////////////////////////////GUEST /////////////////////////////\n\n/////// FETCH ALL SUBCATEGORY CATEGORY AND SERVICES //////////////////////////////\n\nconst fetchAllDataGuestRequest = () =>{\n    return{\n        type: GET_ALL_SUCATEGORY_CATEGORY_SERVICE_REQUEST_GUEST,\n        payload: {\n            loading: true\n          }\n    };\n};\n\nconst fetchAllDataGuestSuccess = (guestData) =>{\n    \n    return{\n        type: GET_ALL_SUCATEGORY_CATEGORY_SERVICE_SUCCESS_GUEST,\n        payload: {\n            guestData\n        }\n    };\n};\n\nconst fetchAllDataGuestFailure = (errorDataGuest) =>{\n    return {\n        type: GET_ALL_SUCATEGORY_CATEGORY_SERVICE_FAILED_GUEST,\n        payload:errorDataGuest\n    };\n};\n\nexport const fetchAllDataGuest = (payload) =>{\n       \n    return async function (dispatch) {\n        dispatch(fetchAllDataGuestRequest());\n        try{\n            const res = await axios({\n                    method:\"get\",\n                    url: URL_Guest+'/categories',\n                  \n                   \n                });\n           \n                  \n                const result = res.data;\n                let payload=[];\n\n                ///////////CAT AND SUB AND SERVICES/////////\n                // result.map((cat)=>{\n                  \n                //     if(cat.length!==0 && cat.subcategories_accepted.length>0 ){\n                //         console.log(cat)\n                //       payload.push(cat);\n                //     }\n                // })\n                ///////////CAT AND SUB AND SERVICES/////////\n\n\n                //////////HOLY CODE /////////////////////////////HOLY CODE /////////////////////////////HOLY CODE /////////////////////////////HOLY CODE ///////////////////\n                //  result.map((res)=>{\n                       \n                //     if(res.subcategories_accepted.length>0){\n                     \n                //           res.subcategories_accepted.map((result)=>  {\n                         \n                //              if(result.services_accepted.length>0){\n                                   \n                //                       payload=[...payload,  \n                //                         ...result.services_accepted,\n                                     \n\n                //                     ];\n                            \n                //           }\n                //     });\n                // }});\n                //////////HOLY CODE /////////////////////////////HOLY CODE /////////////////////////////HOLY CODE ///////////////////\n\n         \n                // result.map((res)=>{\n                       \n                //     if(res.subcategories_accepted.length>0){\n                     \n                //           res.subcategories_accepted.map((result)=>  {\n                         \n                //              if(result.services_accepted.length>0){\n                                   \n                //                       payload=[...payload,  ...result.services_accepted];\n                            \n                //           }\n                //     });\n                // }});\n                ///////////////// SERVICES ONLY ///////\n/////////you get sub and services//////////////\n               \n                result.map((res)=>{\n                \n                   if(res.subcategories_accepted.length>0){\n                         res.subcategories_accepted.map((result)=>  {\n                        \n                            if(result.services_accepted.length>0){\n                                  result.services_accepted.map((value)=>{\n                                    payload=[...payload, { ...value,\n                                        subcategory:result,\n                                        category:res\n                                    }];\n\n                                  })\n                         }\n                   });\n               }});\n/////////you get sub and services//////////////\n                \n         \n              \n                dispatch({type:ACCEPTED_SERVICES,payload})\n                dispatch(fetchAllDataGuestSuccess(result));\n                // dispatch(fetchAllAcceptedServicesFailure(\"\")); \n           \n                \n        }catch(errorDataGuest){\n           \n                dispatch(fetchAllDataGuestFailure(errorDataGuest.response.data));\n                \n        }\n    };\n};\n\n/////////////////FETCH ILLUSTRATOR GUEST ////////////////\n\nconst fetchIlllustratorGuestRequest = () =>{\n    return{\n        type: GET_ALL_SUB_ILLUSTRATOR_SERVICE_REQUEST_GUEST,\n        payload: {\n            loading: true\n          }\n    };\n};\n\nconst fetchIlllustratorGuestSuccess = (guestIllustratorData) =>{\n    \n    return{\n        type: GET_ALL_SUB_ILLUSTRATOR_SERVICE_SUCCESS_GUEST,\n        payload: {\n            guestIllustratorData\n        }\n    };\n};\n\nconst fetchIlllustratorGuestFailure = (errorIllustratorDataGuest) =>{\n    return {\n        type: GET_ALL_SUB_ILLUSTRATOR_SERVICE_FAILED_GUEST,\n        payload:errorIllustratorDataGuest\n    };\n};\n\nexport const fetchIllustratorDataGuest = (payload) =>{\n       \n    return async function (dispatch) {\n        dispatch(fetchIlllustratorGuestRequest());\n        try{\n            const res = await axios({\n                    method:\"get\",\n                    url: URL_Guest+'/paginateServiceSubcategory',\n                                   \n                });                \n                const result = res.data;         \n                \n              \n                dispatch(fetchIlllustratorGuestSuccess(result));\n                       \n                \n        }catch(errorDataGuest){\n           \n                dispatch(fetchIlllustratorGuestFailure(errorDataGuest.response.data));\n                \n        }\n    };\n};\n\n////////////GET COMMENTS ////////////////////////\nconst getCommentsRequestGuest = () =>{\n    \n    return{\n        type: GET_COMMENT_REQUEST_GUEST,\n    };\n};\n\nconst getCommentsSuccessGuest = (commentsData) =>{\n\n    return{\n        type: GET_COMMENT_SUCCESS_GUEST,\n        payload: \n        commentsData\n        \n    };\n};\n\nconst getCommentsFailedGuest = (ErrorGetComments) =>{\n   \n    return {\n        type: GET_COMMENT_FAILED_GUEST,\n        payload:ErrorGetComments\n    };\n};\n\nexport const getCommentsGuest =  (service_id) =>{\n  \n    return async function (dispatch) {\n\n        dispatch(getCommentsRequestGuest());\n    try{\n       const response = await axios({\n            method:\"get\",\n            url: URL_Guest +`/getComments/${service_id}`,\n         \n        });\n\n        const data = response.data;\n        \n        dispatch(getCommentsSuccessGuest(data));\n\n        \n                        \n    }catch(ErrorGetComments){\n     \n        dispatch(getCommentsFailedGuest(ErrorGetComments.response.data));\n    }\n     \n    };\n};\n\n/////////////////FETCH VOICE GUEST ////////////////\n\nconst fetchVoiceGuestRequest = () =>{\n    return{\n        type: GET_ALL_SUB_VOICE_SERVICE_REQUEST_GUEST,\n        payload: {\n            loading: true\n          }\n    };\n};\n\nconst fetchVoiceGuestSuccess = (guestVoiceData) =>{\n    \n    return{\n        type: GET_ALL_SUB_VOICE_SERVICE_SUCCESS_GUEST,\n        payload: {\n            guestVoiceData\n        }\n    };\n};\n\nconst fetchVoiceGuestFailure = (errorVoiceDataGuest) =>{\n    return {\n        type: GET_ALL_SUB_VOICE_SERVICE_FAILED_GUEST,\n        payload:errorVoiceDataGuest\n    };\n};\n\nexport const fetchVoiceGuest = (payload) =>{\n       \n    return async function (dispatch) {\n        dispatch(fetchVoiceGuestRequest());\n        try{\n            const res = await axios({\n                    method:\"get\",\n                    url: URL_Guest+'/paginateServiceSubcategory5',\n                                   \n                });                \n                const result = res.data;         \n                \n              \n                dispatch(fetchVoiceGuestSuccess(result));\n                       \n                \n        }catch(errorVoiceDataGuest){\n           \n                dispatch(fetchVoiceGuestFailure(errorVoiceDataGuest.response.data));\n                \n        }\n    };\n};"]},"metadata":{},"sourceType":"module"}